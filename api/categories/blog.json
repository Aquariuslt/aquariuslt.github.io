{"key":"Blog","url":"https://zexo.dev/categories/blog","path":"/categories/blog","title":"Category: Blog | zexo.dev","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://zexo.dev","name":"Home","position":1},{"@type":"ListItem","item":"https://zexo.dev/categories","name":"Categories","position":2},{"@type":"ListItem","item":"https://zexo.dev/categories/blog","name":"Blog","position":3}]},"type":"LIST","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"zexo.dev"},{"name":"og:type","content":"website"},{"name":"og:description","content":"Category: Blog"},{"name":"description","content":"Category: Blog"}],"data":[{"title":"使用 renovate 监控第三方依赖更新","id":"keep-your-repo-dependencies-up-to-date-with-renovate","created":"2020-03-01T00:00:00.000Z","updated":"2020-03-01T00:00:00.000Z","categories":["Blog"],"tags":["Node","CI","NPM","Renovate","Github"],"cover":"/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate/revonate.png","summary":"依赖更新管理曾一直是我容易纠结的一个问题。我希望一直保持我的仓库使用的第三方 package 一直能保持 安全情况下 的最新版本，随着最新版本的更新，一般伴随着以下几种用户关心的内容：fixing: 修复了一些 bugperformance tuning: 一些性能优化\n","link":"/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate"},{"title":"使用 Patch Package 魔改第三方NPM包","id":"using-patch-package-patching-node-modules","created":"2020-02-12T00:00:00.000Z","updated":"2020-02-12T00:00:00.000Z","categories":["Blog"],"tags":["Node","CI"],"cover":"/posts/2020/02/12/using-patch-package-patching-node-modules/cover.png","summary":"开源社区一直有一个做法(说法): 一言不合就 Fork。自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n","link":"/posts/2020/02/12/using-patch-package-patching-node-modules"},{"title":"Year in Review 2019","id":"review-2019","created":"2020-01-28T00:00:00.000Z","updated":"2020-01-28T00:00:00.000Z","categories":["Blog"],"tags":["Diary"],"cover":"/posts/2020/01/28/review-2019/cover.png","summary":"新年伊始，适逢 2019-nCov 疫情，多了几天在家办公的时间。正好回顾下忙碌的 2019 年。19 年 4 月，得知房租将上涨后，找了一家新的房子，从步行上班距离的城中村搬到了骑车上班距离的远一点的空公寓。家具又是自己买了一番(虽然大出血但是内心自我感觉住宿品质回到了在珠海的时候)。\n","link":"/posts/2020/01/28/review-2019"},{"title":"Monorepo Practice in TypeScript Projects","id":"monorepo-practice-in-typescript-projects","created":"2019-11-14T00:00:00.000Z","updated":"2019-11-14T00:00:00.000Z","categories":["Blog"],"tags":["NPM","CI","Typescript","Monorepo","Lerna","Jest"],"cover":"/posts/2019/11/14/monorepo-practice-in-typescript-projects/cover.png","summary":"随着 Node 生态社区的发展，越来越多的 Nodejs 代码仓库开始采用 Monorepo 的形式进行管理。我们可以看到一些前端 UI 框架、Web 框架，在新版本/一开始就采用了 monorepo 的形式管理代码。Q: 什么是 Monorepo? Monorepo 的基本好处是什么? A: 这里不多阐述，可以参考知乎上的这篇文章: https://zhuanlan.zhihu.com/p/31289463\n","link":"/posts/2019/11/14/monorepo-practice-in-typescript-projects"},{"title":"Github Actions: New YAML Syntax","id":"github-actions-new-yaml-syntax","created":"2019-08-18T00:00:00.000Z","updated":"2019-08-18T00:00:00.000Z","categories":["Blog"],"tags":["NPM","CI","Github","TravisCI","Actions","Docker"],"cover":"/posts/2019/08/18/github-actions-new-yaml-syntax/migrating-github-actions.png","summary":"在之前一篇博文里刚介绍完 Github Actions 配置的HCL语法不久，Github 官方就标记为 deprecated 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语法配置与现有的其他 CI 平台相对更加接近，更加容易举一反三写出合理的配置。\n","link":"/posts/2019/08/18/github-actions-new-yaml-syntax"},{"title":"Travel in Beijing","id":"travel-in-beijing","created":"2019-07-23T00:00:00.000Z","updated":"2019-07-23T00:00:00.000Z","categories":["Blog"],"tags":["Trips"],"cover":"/posts/2019/07/23/travel-in-beijing/palace-museum-01.png","summary":"毕业第四年后，终于有机会第一次旅行，目的地选择了北京。本次北京行采用的是语文课本童年回忆随缘踩点法，在打卡景点的同时，顺便会一下闻名已久的北京帮朋友。算上两天年假，一共有四天假期，周四晚上飞机，周一晚上回深圳。于是按照时间线来一发流水账，在总结下本次北京行的直观感受。\n","link":"/posts/2019/07/23/travel-in-beijing"},{"title":"Github Actions: Overview and Practice","id":"github-actions-overview-and-practice","created":"2019-07-07T00:00:00.000Z","updated":"2019-07-07T00:00:00.000Z","categories":["Blog"],"tags":["NPM","CI","Github","TravisCI","Actions","Docker"],"cover":"/posts/2019/07/07/github-actions-overview-and-practice/github-actions.png","summary":"Github Actions 自从开放 beta 以来，感觉一直没有掀起什么大浪。但是他的在 CI 平台插件方面的概念其实是符合一直以来的方向的: Docker Image as Plugins我在二月份开始已经申请到了 Github Actions Beta 的体验许可，为了体验 Github Actions 的功能，以及跟目前其他开源项目所用的持续集成平台进行简单的对比，下面将以一个 通过 Gtihub Action 发布 npm package 的过程作为初步体验，讲讲我对 Github Actions 在 CI 方面的认识。\n","link":"/posts/2019/07/07/github-actions-overview-and-practice"},{"title":"A Karma Plugin: Karma-JAWR Development Note","id":"karma-jawr-development-note","created":"2018-04-01T00:00:00.000Z","updated":"2018-04-01T00:00:00.000Z","categories":["Blog"],"tags":["Karma","Node","AngularJS","JavaScript","JAWR"],"cover":"/posts/2018/04/01/karma-jawr-development-note/cover.png","summary":"上一篇文章基于 Karma 的非分离式前端单元测试基础方案描述了在拆分基于 JAWR 的，前后端的方案的时候，无可避免的为中间编写一个插件的背景故事。在总结开发这个 karma 插件的笔记的时候，最终目的并不是希望读这篇文章的童鞋了解jawr这个插件所解决的核心问题，更多的是介绍 karma 和 karma 插件的设计理念，稍微对 karma 这个 test-runner 有一个更好的印象；亦或是在前端单元测试框架选型/亦或是根据实际项目需要，为了使得项目可被测试，无可避免的做出比较多的修改的时候，能够遵循这种插件开发的约定，使得项目测试方面更好的走向工程化。\n","link":"/posts/2018/04/01/karma-jawr-development-note"},{"title":"基于Karma的非分离式前端单元测试基础方案","id":"karma-based-traditional-java-web-frontend-unittest-solution","created":"2018-03-04T00:00:00.000Z","updated":"2018-03-04T00:00:00.000Z","categories":["Blog"],"tags":["Java","JAWR","Karma","JavaScript","Webpack","ExtJS","Spring","JSF","SpringMVC"],"cover":"/posts/2018/03/04/karma-based-traditional-java-web-frontend-unittest-solution/cover.png","summary":"TL;DR之前在为公司一个稍微有些年头的核心系统的代码寻找一个合理的单元测试方案，在摆弄了一段时间后，目前奠定了一个基于 Karma 的前端单元测试方案。如果你的项目符合以下条件，那么这个解决方案和其中的思路也许能对你的项目有点帮助。原本的项目与前端相关的部分属于 Java Web 项目，抛开与本次主题无关的部分，具体影响单元测试方案选型和落地的几个因素，我把他归结成几类：\n","link":"/posts/2018/03/04/karma-based-traditional-java-web-frontend-unittest-solution"},{"title":"Latest Update on Blog App","id":"latest-update-on-blog-app","created":"2018-03-03T00:00:00.000Z","updated":"2018-03-03T00:00:00.000Z","categories":["Blog"],"tags":["Vue","JavaScript","Webpack","Karma","Gulp","Github","Blog"],"cover":"/posts/2018/03/03/latest-update-on-blog-app/cover.png","summary":"结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从4.0.0-beta 到了4.0.1 ，算是可以标记 release 的一个版本了。项目地址不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。\n","link":"/posts/2018/03/03/latest-update-on-blog-app"},{"title":"Vue Version Blog App","id":"vue-version-for-blog-app","created":"2017-05-05T00:00:00.000Z","updated":"2017-05-05T00:00:00.000Z","categories":["Blog"],"tags":["Blog","Vue","PWA"],"cover":"/posts/2017/05/05/vue-version-for-blog-app/cover.png","summary":"这篇文章写于 2017-05-05. 下面一部分没实现的功能已经基本实现，并且做了更多的配置外化工作.详情将会发布到新的一篇文章里面.在阅读过 Vue 的官方文档之后,我尝试用其为一个数据可视化项目的图表做一个 Refine,以寻求渲染性能与响应变化上性能的提升,与更细致,可自定义的动画效果.\n","link":"/posts/2017/05/05/vue-version-for-blog-app"},{"title":"Blog Structure Update","id":"new-version-blog-migration","created":"2017-03-12T00:00:00.000Z","updated":"2017-03-12T00:00:00.000Z","categories":["Blog"],"tags":["Blog","Angular"],"cover":"/posts/2017/03/12/new-version-blog-migration/cover.png","summary":"最近正在接触学习Angular2+RxJS相关知识.当Angular发布了@angular/cli之后, 内置的 webpack 工作流程提供了一个官方推荐的比较完整的编译,打包,配置切换的工作流程, 使得其在工程化方面显得有板有眼,愈发被我所接受.\n","link":"/posts/2017/03/12/new-version-blog-migration"},{"title":"蜗居","id":"move-to-new-apartment","created":"2016-07-05T00:00:00.000Z","updated":"2016-07-05T00:00:00.000Z","categories":["Blog"],"tags":["Diary"],"cover":"/posts/2016/07/05/move-to-new-apartment/cover.png","summary":"毕业差不多有一年了,毕业时候租的一年的房子也到期了.\n适逢有同事已经住到 15 年新建好的唐家人才公寓那边,那边房子环境不错,打听到详细情况后,发现最吸引我的还是里面两点:里面没有家具,需要自己购置合同是跟华发物业签而非个人房东这两点真的是太适合我了,一方面是租房合同可以随时终止,而且不用跟各种恶毒的个人房东打交道,二是新交的房子没有家具. 就不用担心租到不合适的房子看到家具风格不搭心里长草.\n","link":"/posts/2016/07/05/move-to-new-apartment"},{"title":"Angular.js常规性能优化阶段总结","id":"angular-ui-performance-tuning-experience","created":"2016-04-30T00:00:00.000Z","updated":"2016-04-30T00:00:00.000Z","categories":["Blog"],"tags":["Angular","JavaScript"],"cover":"/posts/2016/04/30/angular-ui-performance-tuning-experience/cover.png","summary":"最近在为项目进行性能优化的时候,有总结到一些经验.\n现在梳理一遍,方便以后排查问题.在进行 Angular 页面的性能测试以及学习优化手段之前,查阅了挺多资料.\n其中非常推荐一些前端大牛的博客文章,不仅在技术方面深有造诣,而且表达能力非常清晰,能够条理清晰地将经验传授给大家.\n","link":"/posts/2016/04/30/angular-ui-performance-tuning-experience"},{"title":"Site 项目结构介绍","id":"site-code-structure","created":"2016-03-06T00:00:00.000Z","updated":"2016-03-06T00:00:00.000Z","categories":["Blog"],"tags":["Node","JavaScript"],"cover":"/posts/2016/03/06/site-code-structure/cover.png","summary":"应该说是第一个 Node.js 建站项目. 目的是用于替换 JavaWeb 的后台而且可以在过程中练习一下调节样式的水平.项目本身的结构是从JShelf开始. 是由于公司内部组织了一次 MEAN 的一些入门分享. 分成了几个小组,我们小组根据对 MEAN 的认识魔改了这样一个基本的项目基础结构. 在其原本的结构上.做了做了一些蛋疼的修改大概是根据npm install的提示,更换 lib 的名字或者升级 lib 的版本到最新版. 然后删除了一些没必要的模块.\n","link":"/posts/2016/03/06/site-code-structure"},{"title":"网站重构升级计划","id":"site-upgrade-plan","created":"2015-12-27T00:00:00.000Z","updated":"2015-12-27T00:00:00.000Z","categories":["Blog"],"tags":["Site","Blog","VPS","Node"],"cover":"/posts/2015/12/27/site-upgrade-plan/cover.png","summary":"大三的时候,终于接触了第一个能够证实上线的网站项目. 虽然那个项目最后的完成度不咋地,但是从头到尾从需求分析,代码编写, 最后部署到正式服务器上一条龙的经验还是被我全吃掉了.有了掌控 Web 项目的部署运维的初级能力,所以我还是希望能够有一个自己的网站,自己亲手去维护. 由于自己设计 UI 又太 low,然后对 CMS 的能力还是掌控不够. 所以,在购买了自己的 VPS 和域名之后, 就一直使用WordPress作为博客应用.\n","link":"/posts/2015/12/27/site-upgrade-plan"},{"title":"Linux Mean 开发环境搭建","id":"ubuntu-mean-development-environment-setup","created":"2015-12-13T00:00:00.000Z","updated":"2015-12-13T00:00:00.000Z","categories":["Blog"],"tags":["Ubuntu","Linux","IntelliJ IDEA"],"cover":"/posts/2015/12/13/ubuntu-mean-development-environment-setup/cover.png","summary":"最近一个项目中需要用到Redis和 Node.js 操作 OracleDB,而 Windows 下开发就是屁事多. 恰好用到的这两个东西,都写明了官方不支持 Windows,Redis在 Widnows 下的版本是由微软的工程师们在维护. 在 Windows 下搭建好了环境之后,发现Redis在 Windows 下会有一些常见的崩溃情况,上网搜了下估计是 Windows 才会有的情况. 本篇主要介绍在 Linux(Ubuntu)下搭建 MEAN Stack 的相关内容,包括:\n","link":"/posts/2015/12/13/ubuntu-mean-development-environment-setup"},{"title":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils","id":"beanutils-vs-reflection","created":"2015-11-10T00:00:00.000Z","updated":"2015-11-10T00:00:00.000Z","categories":["Blog"],"tags":["Java","Apache"],"cover":"/posts/2015/11/10/beanutils-vs-reflection/cover.png","summary":"最近老大分配了个性能优化的任务,因为主要页面在 Production 上打开的时间太长,(大概 7s?卧槽 第一次听到的时候还以为我听错了). 居然这么慢.. 其实是有主程序大大带着我做,所以在扫了一遍前端 ExtJS 的结构之后,发现错综复杂四年以来不同技术层次的人都在同一个页面上添油加醋, 了解以前的需求之后完全重构基本是不可能的,所以前端的性能优化就交给主程序大大,我跑去扫一下服务器端有什么性能瓶颈.\n","link":"/posts/2015/11/10/beanutils-vs-reflection"},{"title":"Spring 整合 Apache Shiro 实现各等级的权限管理","id":"apache-shiro-spring-integration","created":"2015-10-25T00:00:00.000Z","updated":"2015-10-25T00:00:00.000Z","categories":["Blog"],"tags":["Spring","Security","Shiro","Java"],"cover":"/posts/2015/10/25/apache-shiro-spring-integration/cover.png","summary":"前几个月在做一个常规的权限隔离功能的时候,恰好使用过 Apache Shiro. Apache Shiro 是一款 Java 的安全框架,通常用作 Web 应用的权限校验,身份验证.Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.\n","link":"/posts/2015/10/25/apache-shiro-spring-integration"}]}