[{"filename":"karma-based-traditional-java-web-frontend-unittest-solution","md":"","html":"","metadata":{"title":"基于Karma的非分离式前端单元测试基础方案","created":"2018-03-04","updated":"2018-03-04","category":"Blog","tags":["Java","JAWR","Karma","JavaScript","Webpack","ExtJS","Spring","JSF","SpringMVC"],"cover":"https://picsum.photos/id/220/800/300"},"summary":"TL;DR之前在为公司一个稍微有些年头的核心系统的代码寻找一个合理的单元测试方案，在摆弄了一段时间后，目前奠定了一个基于 Karma 的前端单元测试方案。如果你的项目符合以下条件，那么这个解决方案和其","toc":[{"label":"基于 Karma 的非分离式前端单元测试基础方案","level":1,"id":"基于-karma-的非分离式前端单元测试基础方案","position":0,"children":[{"label":"Background","level":2,"id":"background","position":1,"children":[{"label":"Existing Platform & Technical Selection","level":3,"id":"existing-platform-technical-selection","position":2,"children":[{"label":"References:","level":4,"id":"references","position":3,"children":[],"pid":2}],"pid":1},{"label":"Existing Frontend Core Framework Test Support","level":3,"id":"existing-frontend-core-framework-test-support","position":4,"children":[{"label":"ExtJS + JAWR Modularize + Component Based Development","level":4,"id":"extjs-jawr-modularize-component-based-development","position":5,"children":[],"pid":4},{"label":"Wrong Usage Since Long Long Ago","level":4,"id":"wrong-usage-since-long-long-ago","position":6,"children":[],"pid":4}],"pid":1},{"label":"Situations Blocking Writing UnitTest","level":3,"id":"situations-blocking-writing-unittest","position":7,"children":[],"pid":1},{"label":"Is It Easy to Understand","level":3,"id":"is-it-easy-to-understand","position":8,"children":[],"pid":1}],"pid":0},{"label":"Design and Benefits","level":2,"id":"design-and-benefits","position":9,"children":[{"label":"Design Background","level":3,"id":"design-background","position":10,"children":[],"pid":9},{"label":"Test Framework Selection","level":3,"id":"test-framework-selection","position":11,"children":[],"pid":9},{"label":"Diagram","level":3,"id":"diagram","position":12,"children":[{"label":"karma.conf.js","level":4,"id":"karmaconfjs","position":13,"children":[],"pid":12}],"pid":9},{"label":"Decoupled Solution","level":3,"id":"decoupled-solution","position":14,"children":[],"pid":9},{"label":"Benefits","level":3,"id":"benefits","position":15,"children":[],"pid":9}],"pid":0},{"label":"Example","level":2,"id":"example","position":16,"children":[{"label":"Example Usage","level":3,"id":"example-usage","position":17,"children":[],"pid":16}],"pid":0},{"label":"Result","level":2,"id":"result","position":18,"children":[],"pid":0},{"label":"Summary","level":2,"id":"summary","position":19,"children":[],"pid":0}],"pid":-1}],"images":["https://img.aquariuslt.com/posts/karma-jawr-generated-index.jpg"],"opengraph":{"og:title":"基于Karma的非分离式前端单元测试基础方案","og:type":"article","og:image":"https://picsum.photos/id/220/800/300","og:url":"https://blog.aquariuslt.com/posts/2018/03/04/karma-based-traditional-java-web-frontend-unittest-solution","og:description":"TL;DR之前在为公司一个稍微有些年头的核心系统的代码寻找一个合理的单元测试方案，在摆弄了一段时间后，目前奠定了一个基于 Karma 的前端单元测试方案。如果你的项目符合以下条件，那么这个解决方案和其","article:author":"Aquariuslt","article:section":"Blog","article:tag":"Java,JAWR,Karma,JavaScript,Webpack,ExtJS,Spring,JSF,SpringMVC","article:published_time":"2018-03-04","article:modified_time":"2018-03-04","website":"https://blog.aquariuslt.com"},"permalink":"/2018/03/04/karma-based-traditional-java-web-frontend-unittest-solution"},{"filename":"google-codejam-2016-qualification-round","md":"","html":"","metadata":{"title":"Google CodeJam 2016 Qualification","created":"2016-04-10","updated":"2016-04-10","category":"Note","tags":["Java","Google"],"cover":"https://picsum.photos/id/51/800/300"},"summary":"今早结束的 Google CodeJam 2016 资格赛. 由于智商问题和加班了一天,所以只能水出前面两道水题. 但是还是稍微涨了点姿势. 记录下解题的过程和一些小彩蛋.将我的 A 和 B 的 So","toc":[{"label":"Google CodeJam 2016 Qualification","level":1,"id":"google-codejam-2016-qualification","position":0,"children":[{"label":"A: Counting Sheep","level":2,"id":"a-counting-sheep","position":1,"children":[{"label":"Problem Description","level":3,"id":"problem-description","position":2,"children":[],"pid":1},{"label":"Translation","level":3,"id":"translation","position":3,"children":[],"pid":1},{"label":"Solution","level":3,"id":"solution","position":4,"children":[],"pid":1},{"label":"Source Code","level":3,"id":"source-code","position":5,"children":[],"pid":1}],"pid":0},{"label":"B: Revenge of the Pancakes","level":2,"id":"b-revenge-of-the-pancakes","position":6,"children":[{"label":"Problem Description","level":3,"id":"problem-description","position":7,"children":[],"pid":6},{"label":"Translation","level":3,"id":"translation","position":8,"children":[],"pid":6},{"label":"Solution","level":3,"id":"solution","position":9,"children":[],"pid":6},{"label":"Source Code","level":3,"id":"source-code","position":10,"children":[],"pid":6}],"pid":0},{"label":"Java Reader in ACM","level":2,"id":"java-reader-in-acm","position":11,"children":[],"pid":0}],"pid":-1}],"images":[],"opengraph":{"og:title":"Google CodeJam 2016 Qualification","og:type":"article","og:image":"https://picsum.photos/id/51/800/300","og:url":"https://blog.aquariuslt.com/posts/2016/04/10/google-codejam-2016-qualification-round","og:description":"今早结束的 Google CodeJam 2016 资格赛. 由于智商问题和加班了一天,所以只能水出前面两道水题. 但是还是稍微涨了点姿势. 记录下解题的过程和一些小彩蛋.将我的 A 和 B 的 So","article:author":"Aquariuslt","article:section":"Note","article:tag":"Java,Google","article:published_time":"2016-04-10","article:modified_time":"2016-04-10","website":"https://blog.aquariuslt.com"},"permalink":"/2016/04/10/google-codejam-2016-qualification-round"},{"filename":"beanutils-vs-reflection","md":"","html":"","metadata":{"title":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils","created":"2015-11-10","updated":"2015-11-10","category":"Blog","tags":["Java","Apache"],"cover":"https://picsum.photos/id/221/800/300"},"summary":"最近老大分配了个性能优化的任务,因为主要页面在Production上打开的时间太长,(大概7s?卧槽 第一次听到的时候还以为我听错了).\n居然这么慢..\n其实是有主程序大大带着我做,所以在扫了一遍前端","toc":[{"label":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils","level":1,"id":"记一次神奇的优化过程java反射-vs-apache-beanutils-vs-spring-beanutils","position":0,"children":[{"label":"Background","level":2,"id":"background","position":1,"children":[{"label":"使用 JProfiler 分析 代码性能","level":3,"id":"使用-jprofiler-分析-代码性能","position":2,"children":[{"label":"IntelliJ IDEA集成 JProfiler 监控 Weblogic 实例","level":4,"id":"intellij-idea集成-jprofiler-监控-weblogic-实例","position":3,"children":[],"pid":2},{"label":"通过JProfiler 分析方法执行时间","level":4,"id":"通过jprofiler-分析方法执行时间","position":4,"children":[],"pid":2}],"pid":1},{"label":"正文:性能优化部分","level":3,"id":"正文性能优化部分","position":5,"children":[],"pid":1}],"pid":0},{"label":"Summary","level":2,"id":"summary","position":6,"children":[],"pid":0}],"pid":-1}],"images":["https://img.alicdn.com/tfscom/TB1Q_QmKpXXXXaAXpXXXXXXXXXX.png"],"opengraph":{"og:title":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils","og:type":"article","og:image":"https://picsum.photos/id/221/800/300","og:url":"https://blog.aquariuslt.com/posts/2015/11/10/beanutils-vs-reflection","og:description":"最近老大分配了个性能优化的任务,因为主要页面在Production上打开的时间太长,(大概7s?卧槽 第一次听到的时候还以为我听错了).\n居然这么慢..\n其实是有主程序大大带着我做,所以在扫了一遍前端","article:author":"Aquariuslt","article:section":"Blog","article:tag":"Java,Apache","article:published_time":"2015-11-10","article:modified_time":"2015-11-10","website":"https://blog.aquariuslt.com"},"permalink":"/2015/11/10/beanutils-vs-reflection"},{"filename":"apache-shiro-spring-integration","md":"","html":"","metadata":{"title":"Spring 整合 Apache Shiro 实现各等级的权限管理","created":"2015-10-25","updated":"2015-10-25","category":"Blog","tags":["Spring","Security","Shiro","Java"],"cover":"https://picsum.photos/id/927/800/300"},"summary":"前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.\nApache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.Apache Shiro i","toc":[{"label":"Spring 整合 Apache Shiro 实现各等级的权限管理","level":1,"id":"spring-整合-apache-shiro-实现各等级的权限管理","position":0,"children":[{"label":"Background","level":2,"id":"background","position":1,"children":[],"pid":0},{"label":"权限控制","level":2,"id":"权限控制","position":2,"children":[{"label":"URL级别的权限控制","level":3,"id":"url级别的权限控制","position":3,"children":[{"label":"业务场景假设","level":4,"id":"业务场景假设","position":4,"children":[],"pid":3},{"label":"Shiro基本配置","level":4,"id":"shiro基本配置","position":5,"children":[{"label":"Maven","level":5,"id":"maven","position":6,"children":[],"pid":5},{"label":"web.xml","level":5,"id":"webxml","position":7,"children":[],"pid":5},{"label":"Spring ApplicationContext.xml","level":5,"id":"spring-applicationcontextxml","position":8,"children":[],"pid":5},{"label":"Spring applicationContext-shiro-captcha.xml","level":5,"id":"spring-applicationcontext-shiro-captchaxml","position":9,"children":[],"pid":5}],"pid":3},{"label":"配置详解","level":4,"id":"配置详解","position":10,"children":[{"label":"登录与注销","level":5,"id":"登录与注销","position":11,"children":[{"label":"登录","level":6,"id":"登录","position":12,"children":[],"pid":11},{"label":"注销","level":6,"id":"注销","position":13,"children":[],"pid":11}],"pid":10},{"label":"同步登录与异步登陆","level":5,"id":"同步登录与异步登陆","position":14,"children":[],"pid":10},{"label":"角色校验","level":5,"id":"角色校验","position":15,"children":[],"pid":10}],"pid":3}],"pid":2}],"pid":0},{"label":"Summary","level":2,"id":"summary","position":16,"children":[],"pid":0}],"pid":-1}],"images":[],"opengraph":{"og:title":"Spring 整合 Apache Shiro 实现各等级的权限管理","og:type":"article","og:image":"https://picsum.photos/id/927/800/300","og:url":"https://blog.aquariuslt.com/posts/2015/10/25/apache-shiro-spring-integration","og:description":"前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.\nApache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.Apache Shiro i","article:author":"Aquariuslt","article:section":"Blog","article:tag":"Spring,Security,Shiro,Java","article:published_time":"2015-10-25","article:modified_time":"2015-10-25","website":"https://blog.aquariuslt.com"},"permalink":"/2015/10/25/apache-shiro-spring-integration"}]