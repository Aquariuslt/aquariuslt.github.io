{"filename":"github-actions-new-yaml-syntax","md":"# Github Actions: New YAML Syntax\n\n```metadata\ntitle: 'Github Actions: New YAML Syntax'\ncreated: 2019-08-18\nupdated: 2019-08-18\ncategory: Blog\ntags:\n- NPM\n- CI\n- Github\n- TravisCI\n- Actions\n- Docker\ncover: https://img.aquariuslt.com/posts/2019/08/migrating-github-actions.png\n```\n\n## Background\n\n在之前一篇博文里刚介绍完 Github Actions 配置的`HCL`语法不久，Github 官方就标记为 **deprecated** 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语法配置与现有的其他\nCI 平台相对更加接近，更加容易举一反三写出合理的配置。\n\n\n> The documentation at https://developer.github.com/actions and support for the HCL syntax in GitHub Actions\n> will be deprecated on September 30, 2019. Documentation for the new limited public beta using the \n> YAML syntax is available on https://help.github.com. See \"Automating your workflow with GitHub Actions\" \n> for documentation using the YAML syntax.\n\n自此之后，官方的 Github Actions Marketplace 也多了更多的官方 Actions (actions 官方 org 原本置顶的几个 actions 源代码也都换成了常见的项目集成 samples)\n\n话不多说，就着本次 Github Actions Syntax Migration，还是以上次的 `jest-properties-loader` 为例子，我将它用 typescript 进行重写，并且把 workflow 以同样\n的思路，迁移到 `YAML` 语法版本。具体的语法不阐述了，基本是所谓的 **所见即所得** 理解模式。\n\n## Comparison\n\n既然是官方提倡的 Migration，Github 提供了很多帮助文档，来帮助你进行迁移。\n\n最后的 [References](#references) 部分，会给出一些官方提及的参考链接，但在这里更想直观的提及的是这次 Migration 前后的几个重要对比。\n\n- 在 Github Repo 的设置界面，原本的图形化修改 workflow 文件已经失效，直接变成一个 YAML 文件的在线编辑模式\n- 默认的 workflow 默认路径，从 `.github/*.workflow` 变成了 `.github/workflows/*.yml` \n- 对应每一个 Step 的构建日志，都添加了基础的高亮功能，在也不是默认的 `stdout | tee` 的形式了\n- 给人的感觉是启动速度超快，以前触发一次 Actions 从对应的构建环境容器拉取、启动，都花了不少时间，现在基本对标其他 CI 平台的链路完成速度\n- 元数据支持方面，多了很多可选的选项，可以在 YAML 配置里编写很多类似注释级别的 `metadata`\n- 通过模板语法支持 `matrix build`\n\n\n\n![Build Log Highlight](https://img.aquariuslt.com/posts/2019/08/build-log-highlight-support.png)\n\n\n\n## Migrations\n\n下面这里是我个人对 `jest-properties-loader` 在使用 TypeScript 重写后的的迁移过程。\n\n### Step 0: Migration Solution\n\n我直接放弃了官方的一些迁移手段: 比如先把官方一个迁移工具 clone 到本地，紧接着执行里面的脚本，将对应的 `.workflow` 文件转化成新的 Yaml 文件。\n\n根据迁移后的实际流程，然后找官方提供的 Example 进行魔改。\n\n目前来说，`jest-properties-loader` 作为一款 NPM Package\n\n1. 平时提交代码，通过 CI 平台执行 `yarn test`, `yarn build`, 上传覆盖率报告到 **Codecov**\n2. 触发 `release` 事件时，通过 CI 平台执行 `yarn build`，之后发布到 `npm registry` 上\n\n\n### Step 1: Copy Official Node-CI Example\n\n在确立了流程后，我们可以从任意 Repo 的 `Actions` 标签页，选择一些对应语言/平台的 `example workflow` 进行魔改。\n\n![Select NPM Example Workflow](https://img.aquariuslt.com/posts/2019/08/select-sample-workflow-for-npm.png)\n\n把官方的 `Node-CI` 直接应用到项目本身，也完全OK。\n自此，我们第一步，通过CI平台执行`yarn test`,`yarn build`的功能就完成了。\n\n```yaml\nname: Node CI\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [8.x, 10.x, 12.x]\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    - name: npm install, build, and test\n      run: |\n        npm install\n        npm run build --if-present\n        npm test\n```\n\n### Step 2: Upload coverage report to Codecov\n\n上传通用的 `lcov.info` 覆盖率报告文件到 CodeCov， 这一步也从之前的野生第三方 actions 切换到官方的 actions。\n\n如下图，我们使用 新的 `${{secrets.CODECOV_TOKEN}}` 来获取 repo secrets 中的对应变量\n\n```yaml\n      -\n        name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v1.0.0\n        with:\n          token: ${{secrets.CODECOV_TOKEN}}\n          file: ./reports/coverage/lcov.info\n          flags: unittests\n          name: codecov-umbrella\n\n```\n\n### Step 3: Trigger Build Step with Condition (Release)\n\n在进行发布时，按照上篇博文的 **创建Release触发新的Workflow** 的思路，原本的`HCL`配置应该这么写:\n\n\n**Before:**\n\n```hcl\nworkflow \"release\" {\n  on = \"release\"\n  resolves = [\"npm:release\"]\n}\n\naction \"filter:release\" {\n  uses = \"actions/bin/filter@master\"\n  args = \"action created*\"\n}\n\n\naction \"npm:release\" {\n  needs = \"filter:release\"\n  uses = \"actions/npm@master\"\n  secrets = [\"NPM_AUTH_TOKEN\"]\n  args = \"publish\"\n}\n```\n\n\n**After:**\n```yaml\nname: Publish to NPM\n\non:\n  release:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        uses: actions/checkout@v1\n      -\n        uses: actions/setup-node@v1\n        with:\n          node-version: 10\n      -\n        run: |\n          yarn install\n          yarn test\n          yarn build\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      -\n        uses: actions/checkout@v1\n      -\n        uses: actions/setup-node@v1\n        with:\n          node-version: 10\n          registry-url: https://registry.npmjs.org/\n      -\n        run: |\n          yarn install\n          yarn test\n          yarn build\n      -\n        run: npm publish\n        if: github.event.action == 'created'\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}\n\n```\n\n还是原汁原味的读取 `NPM_AUTH_TOKEN` secrets 变量, 使用 `if` 条件表达式代替原来的 `bin/filter` + `args` 条件表达式。\n\n即可完整地代替原本的 HCL 语法 Workflow 。\n\n\n## References\n\n- [Migrating GitHub Actions from HCL syntax to YAML syntax](https://help.github.com/en/articles/migrating-github-actions-from-hcl-syntax-to-yaml-syntax)\n- [Automating your workflow with GitHub Actions](https://help.github.com/en/categories/automating-your-workflow-with-github-actions)\n","html":"<h1 id=\"github-actions-new-yaml-syntax\">Github Actions: New YAML Syntax</h1>\n<h2 id=\"background\">Background</h2>\n<p>在之前一篇博文里刚介绍完 Github Actions 配置的<code>HCL</code>语法不久，Github 官方就标记为 <strong>deprecated</strong> 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语法配置与现有的其他\nCI 平台相对更加接近，更加容易举一反三写出合理的配置。</p>\n<blockquote>\n<p>The documentation at https://developer.github.com/actions and support for the HCL syntax in GitHub Actions\nwill be deprecated on September 30, 2019. Documentation for the new limited public beta using the\nYAML syntax is available on https://help.github.com. See &quot;Automating your workflow with GitHub Actions&quot;\nfor documentation using the YAML syntax.</p>\n</blockquote>\n<p>自此之后，官方的 Github Actions Marketplace 也多了更多的官方 Actions (actions 官方 org 原本置顶的几个 actions 源代码也都换成了常见的项目集成 samples)</p>\n<p>话不多说，就着本次 Github Actions Syntax Migration，还是以上次的 <code>jest-properties-loader</code> 为例子，我将它用 typescript 进行重写，并且把 workflow 以同样\n的思路，迁移到 <code>YAML</code> 语法版本。具体的语法不阐述了，基本是所谓的 <strong>所见即所得</strong> 理解模式。</p>\n<h2 id=\"comparison\">Comparison</h2>\n<p>既然是官方提倡的 Migration，Github 提供了很多帮助文档，来帮助你进行迁移。</p>\n<p>最后的 <a href=\"#references\">References</a> 部分，会给出一些官方提及的参考链接，但在这里更想直观的提及的是这次 Migration 前后的几个重要对比。</p>\n<ul>\n<li>在 Github Repo 的设置界面，原本的图形化修改 workflow 文件已经失效，直接变成一个 YAML 文件的在线编辑模式</li>\n<li>默认的 workflow 默认路径，从 <code>.github/*.workflow</code> 变成了 <code>.github/workflows/*.yml</code></li>\n<li>对应每一个 Step 的构建日志，都添加了基础的高亮功能，在也不是默认的 <code>stdout | tee</code> 的形式了</li>\n<li>给人的感觉是启动速度超快，以前触发一次 Actions 从对应的构建环境容器拉取、启动，都花了不少时间，现在基本对标其他 CI 平台的链路完成速度</li>\n<li>元数据支持方面，多了很多可选的选项，可以在 YAML 配置里编写很多类似注释级别的 <code>metadata</code></li>\n<li>通过模板语法支持 <code>matrix build</code></li>\n</ul>\n<p><img src=\"https://img.aquariuslt.com/posts/2019/08/build-log-highlight-support.png\" alt=\"Build Log Highlight\"></p>\n<h2 id=\"migrations\">Migrations</h2>\n<p>下面这里是我个人对 <code>jest-properties-loader</code> 在使用 TypeScript 重写后的的迁移过程。</p>\n<h3 id=\"step-0-migration-solution\">Step 0: Migration Solution</h3>\n<p>我直接放弃了官方的一些迁移手段: 比如先把官方一个迁移工具 clone 到本地，紧接着执行里面的脚本，将对应的 <code>.workflow</code> 文件转化成新的 Yaml 文件。</p>\n<p>根据迁移后的实际流程，然后找官方提供的 Example 进行魔改。</p>\n<p>目前来说，<code>jest-properties-loader</code> 作为一款 NPM Package</p>\n<ol>\n<li>平时提交代码，通过 CI 平台执行 <code>yarn test</code>, <code>yarn build</code>, 上传覆盖率报告到 <strong>Codecov</strong></li>\n<li>触发 <code>release</code> 事件时，通过 CI 平台执行 <code>yarn build</code>，之后发布到 <code>npm registry</code> 上</li>\n</ol>\n<h3 id=\"step-1-copy-official-node-ci-example\">Step 1: Copy Official Node-CI Example</h3>\n<p>在确立了流程后，我们可以从任意 Repo 的 <code>Actions</code> 标签页，选择一些对应语言/平台的 <code>example workflow</code> 进行魔改。</p>\n<p><img src=\"https://img.aquariuslt.com/posts/2019/08/select-sample-workflow-for-npm.png\" alt=\"Select NPM Example Workflow\"></p>\n<p>把官方的 <code>Node-CI</code> 直接应用到项目本身，也完全OK。\n自此，我们第一步，通过CI平台执行<code>yarn test</code>,<code>yarn build</code>的功能就完成了。</p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Node</span> <span class=\"hljs-string\">CI</span>\n\n<span class=\"hljs-attr\">on:</span> <span class=\"hljs-string\">[push]</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n<span class=\"hljs-attr\">  build:</span>\n\n<span class=\"hljs-attr\">    runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n<span class=\"hljs-attr\">    strategy:</span>\n<span class=\"hljs-attr\">      matrix:</span>\n<span class=\"hljs-attr\">        node-version:</span> <span class=\"hljs-string\">[8.x,</span> <span class=\"hljs-number\">10.</span><span class=\"hljs-string\">x,</span> <span class=\"hljs-number\">12.</span><span class=\"hljs-string\">x]</span>\n\n<span class=\"hljs-attr\">    steps:</span>\n<span class=\"hljs-attr\">    - uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span>\n<span class=\"hljs-attr\">    - name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.node-version</span> <span class=\"hljs-string\">}}</span>\n<span class=\"hljs-attr\">      uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span>\n<span class=\"hljs-attr\">      with:</span>\n<span class=\"hljs-attr\">        node-version:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">matrix.node-version</span> <span class=\"hljs-string\">}}</span>\n<span class=\"hljs-attr\">    - name:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install,</span> <span class=\"hljs-string\">build,</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">test</span>\n<span class=\"hljs-attr\">      run:</span> <span class=\"hljs-string\">|\n        npm install\n        npm run build --if-present\n        npm test\n</span></code></pre>\n<h3 id=\"step-2-upload-coverage-report-to-codecov\">Step 2: Upload coverage report to Codecov</h3>\n<p>上传通用的 <code>lcov.info</code> 覆盖率报告文件到 CodeCov， 这一步也从之前的野生第三方 actions 切换到官方的 actions。</p>\n<p>如下图，我们使用 新的 <code>${{secrets.CODECOV_TOKEN}}</code> 来获取 repo secrets 中的对应变量</p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        name:</span> <span class=\"hljs-string\">Upload</span> <span class=\"hljs-string\">coverage</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">Codecov</span>\n<span class=\"hljs-attr\">        uses:</span> <span class=\"hljs-string\">codecov/codecov-action@v1.0.0</span>\n<span class=\"hljs-attr\">        with:</span>\n<span class=\"hljs-attr\">          token:</span> <span class=\"hljs-string\">${{secrets.CODECOV_TOKEN}}</span>\n<span class=\"hljs-attr\">          file:</span> <span class=\"hljs-string\">./reports/coverage/lcov.info</span>\n<span class=\"hljs-attr\">          flags:</span> <span class=\"hljs-string\">unittests</span>\n<span class=\"hljs-attr\">          name:</span> <span class=\"hljs-string\">codecov-umbrella</span>\n\n</code></pre>\n<h3 id=\"step-3-trigger-build-step-with-condition-release\">Step 3: Trigger Build Step with Condition (Release)</h3>\n<p>在进行发布时，按照上篇博文的 <strong>创建Release触发新的Workflow</strong> 的思路，原本的<code>HCL</code>配置应该这么写:</p>\n<p><strong>Before:</strong></p>\n<pre><code class=\"hljs hcl\">workflow &quot;release&quot; {\n  on = &quot;release&quot;\n  resolves = [&quot;npm:release&quot;]\n}\n\naction &quot;filter:release&quot; {\n  uses = &quot;actions/bin/filter@master&quot;\n  args = &quot;action created*&quot;\n}\n\n\naction &quot;npm:release&quot; {\n  needs = &quot;filter:release&quot;\n  uses = &quot;actions/npm@master&quot;\n  secrets = [&quot;NPM_AUTH_TOKEN&quot;]\n  args = &quot;publish&quot;\n}\n</code></pre>\n<p><strong>After:</strong></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Publish</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">NPM</span>\n\n<span class=\"hljs-attr\">on:</span>\n<span class=\"hljs-attr\">  release:</span>\n<span class=\"hljs-attr\">    branches:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">master</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n<span class=\"hljs-attr\">  build:</span>\n<span class=\"hljs-attr\">    runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n<span class=\"hljs-attr\">    steps:</span>\n<span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span>\n<span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span>\n<span class=\"hljs-attr\">        with:</span>\n<span class=\"hljs-attr\">          node-version:</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        run:</span> <span class=\"hljs-string\">|\n          yarn install\n          yarn test\n          yarn build\n\n</span><span class=\"hljs-attr\">  publish-npm:</span>\n<span class=\"hljs-attr\">    needs:</span> <span class=\"hljs-string\">build</span>\n<span class=\"hljs-attr\">    runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n<span class=\"hljs-attr\">    steps:</span>\n<span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span>\n<span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span>\n<span class=\"hljs-attr\">        with:</span>\n<span class=\"hljs-attr\">          node-version:</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-attr\">          registry-url:</span> <span class=\"hljs-attr\">https://registry.npmjs.org/</span>\n<span class=\"hljs-bullet\">      -</span>\n<span class=\"hljs-attr\">        run:</span> <span class=\"hljs-string\">|\n          yarn install\n          yarn test\n          yarn build\n      -\n</span><span class=\"hljs-attr\">        run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">publish</span>\n<span class=\"hljs-attr\">        if:</span> <span class=\"hljs-string\">github.event.action</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">'created'</span>\n<span class=\"hljs-attr\">        env:</span>\n<span class=\"hljs-attr\">          NODE_AUTH_TOKEN:</span> <span class=\"hljs-string\">${{secrets.NPM_AUTH_TOKEN}}</span>\n\n</code></pre>\n<p>还是原汁原味的读取 <code>NPM_AUTH_TOKEN</code> secrets 变量, 使用 <code>if</code> 条件表达式代替原来的 <code>bin/filter</code> + <code>args</code> 条件表达式。</p>\n<p>即可完整地代替原本的 HCL 语法 Workflow 。</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://help.github.com/en/articles/migrating-github-actions-from-hcl-syntax-to-yaml-syntax\">Migrating GitHub Actions from HCL syntax to YAML syntax</a></li>\n<li><a href=\"https://help.github.com/en/categories/automating-your-workflow-with-github-actions\">Automating your workflow with GitHub Actions</a></li>\n</ul>\n","metadata":{"title":"Github Actions: New YAML Syntax","created":"2019-08-18","updated":"2019-08-18","category":"Blog","tags":["NPM","CI","Github","TravisCI","Actions","Docker"],"cover":"https://img.aquariuslt.com/posts/2019/08/migrating-github-actions.png"},"summary":"在之前一篇博文里刚介绍完 Github Actions 配置的`HCL`语法不久，Github 官方就标记为 **deprecated** 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语","toc":[{"label":"Github Actions: New YAML Syntax","level":1,"id":"github-actions-new-yaml-syntax","position":0,"children":[{"label":"Background","level":2,"id":"background","position":1,"children":[],"pid":0},{"label":"Comparison","level":2,"id":"comparison","position":2,"children":[],"pid":0},{"label":"Migrations","level":2,"id":"migrations","position":3,"children":[{"label":"Step 0: Migration Solution","level":3,"id":"step-0-migration-solution","position":4,"children":[],"pid":3},{"label":"Step 1: Copy Official Node-CI Example","level":3,"id":"step-1-copy-official-node-ci-example","position":5,"children":[],"pid":3},{"label":"Step 2: Upload coverage report to Codecov","level":3,"id":"step-2-upload-coverage-report-to-codecov","position":6,"children":[],"pid":3},{"label":"Step 3: Trigger Build Step with Condition (Release)","level":3,"id":"step-3-trigger-build-step-with-condition-release","position":7,"children":[],"pid":3}],"pid":0},{"label":"References","level":2,"id":"references","position":8,"children":[],"pid":0}],"pid":-1}],"images":["https://img.aquariuslt.com/posts/2019/08/build-log-highlight-support.png","https://img.aquariuslt.com/posts/2019/08/select-sample-workflow-for-npm.png"],"opengraph":{"og:title":"Github Actions: New YAML Syntax","og:type":"article","og:image":"https://img.aquariuslt.com/posts/2019/08/migrating-github-actions.png","og:url":"https://blog.aquariuslt.com/posts/2019/08/18/github-actions-new-yaml-syntax","og:description":"在之前一篇博文里刚介绍完 Github Actions 配置的`HCL`语法不久，Github 官方就标记为 **deprecated** 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语","article:author":"Aquariuslt","article:section":"Blog","article:tag":"NPM,CI,Github,TravisCI,Actions,Docker","article:published_time":"2019-08-18","article:modified_time":"2019-08-18","website":"https://blog.aquariuslt.com"},"jsonld":{"@type":"Article","articleBody":"在之前一篇博文里刚介绍完 Github Actions 配置的`HCL`语法不久，Github 官方就标记为 **deprecated** 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语","articleSection":["Github Actions: New YAML Syntax"],"wordCount":5047,"author":{"@type":"Person","image":"https://avatars2.githubusercontent.com/u/6554061?s=460&v=4","name":"Aquariuslt","url":"blog.aquariuslt.com","identifier":"Aquariuslt","description":"Personal Blog | Coder | WoWer | On the way.","mainEntityOfPage":"Personal Blog | Coder | WoWer | On the way."},"keywords":["NPM","CI","Github","TravisCI","Actions","Docker"],"thumbnailUrl":"https://img.aquariuslt.com/posts/2019/08/migrating-github-actions.png","version":"2019-08-18","text":"在之前一篇博文里刚介绍完 Github Actions 配置的`HCL`语法不久，Github 官方就标记为 **deprecated** 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语"},"permalink":"/2019/08/18/github-actions-new-yaml-syntax"}