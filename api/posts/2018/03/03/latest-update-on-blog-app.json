{"key":"latest-update-on-blog-app","url":"https://zexo.dev/posts/2018/03/03/latest-update-on-blog-app","path":"/posts/2018/03/03/latest-update-on-blog-app","title":"Latest Update on Blog App | zexo.dev","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://zexo.dev","name":"Home","position":1},{"@type":"ListItem","item":"https://zexo.dev/posts","name":"Posts","position":2},{"@type":"ListItem","item":"https://zexo.dev/posts/2018/03/03/latest-update-on-blog-app","name":"Latest Update on Blog App","position":3}]},"type":"DETAIL","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-2"},{"name":"og:site_name","content":"zexo.dev"},{"name":"og:type","content":"website"},{"name":"og:title","content":"Latest Update on Blog App"},{"name":"og:description","content":"结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从4.0.0-beta 到了4.0.1 ，算是可以标记 release 的一个版本了。项目地址不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。\n"},{"name":"og:image","content":"https:/zexo.dev/posts/2018/03/03/latest-update-on-blog-app/cover.png"},{"name":"og:type","content":"article"},{"name":"description","content":"结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从4.0.0-beta 到了4.0.1 ，算是可以标记 release 的一个版本了。项目地址不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。\n"}],"data":{"title":"Latest Update on Blog App","id":"latest-update-on-blog-app","created":"2018-03-03T00:00:00.000Z","updated":"2018-03-03T00:00:00.000Z","categories":[{"id":"blog","label":"Blog","total":0,"link":"/categories/blog"}],"tags":[{"id":"vue","label":"Vue","total":0,"link":"/tags/vue"},{"id":"javascript","label":"JavaScript","total":1,"link":"/tags/javascript"},{"id":"webpack","label":"Webpack","total":2,"link":"/tags/webpack"},{"id":"karma","label":"Karma","total":3,"link":"/tags/karma"},{"id":"gulp","label":"Gulp","total":4,"link":"/tags/gulp"},{"id":"github","label":"Github","total":5,"link":"/tags/github"},{"id":"blog","label":"Blog","total":6,"link":"/tags/blog"}],"cover":"/posts/2018/03/03/latest-update-on-blog-app/cover.png","images":["./blog-resource-transfer-time.png","./benchmark-blog-website.png"],"toc":[{"label":"Latest Update on Blog App","level":1,"id":"latest-update-on-blog-app","position":0,"children":[{"label":"Refactor Background","level":2,"id":"refactor-background","position":1,"children":[],"pid":0},{"label":"New Features","level":2,"id":"new-features","position":2,"children":[],"pid":0},{"label":"Structure/Design/Dependencies Update","level":2,"id":"structuredesigndependencies-update","position":3,"children":[{"label":"Config Design","level":3,"id":"config-design","position":4,"children":[],"pid":3},{"label":"Build Flow","level":3,"id":"build-flow","position":5,"children":[],"pid":3},{"label":"Testing Flow","level":3,"id":"testing-flow","position":6,"children":[],"pid":3},{"label":"Dependencies/3rd Party Lib Selection","level":3,"id":"dependencies3rd-party-lib-selection","position":7,"children":[],"pid":3}],"pid":0},{"label":"Benchmark","level":2,"id":"benchmark","position":8,"children":[],"pid":0},{"label":"TODO","level":2,"id":"todo","position":9,"children":[],"pid":0}],"pid":-1}],"summary":"结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从4.0.0-beta 到了4.0.1 ，算是可以标记 release 的一个版本了。项目地址不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。\n","src":"\n# Latest Update on Blog App\n\n结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从`4.0.0-beta` 到了`4.0.1` ，算是可以标记 release 的一个版本了。\n\n[项目地址](https://github.com/aquariuslt/blog)不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。\n\n## Refactor Background\n\n其实是很少符合很多最佳实践\n\n- 测试流程不完整\n- 代码抽象结构不够好\n- 依赖升级不够及时\n- Markdown 功能化不够完整(其实这次重构花了很多时间都没有做好)\n- 之前 Gulp 的部分功能 发现 Webpack 已经有比较成熟的方案可以实现，需要替换\n\n## New Features\n\n目前添加的新功能：\n\n- 提供了`feed.xml`，支持 RSS 功能\n- 支持 Github Pages SEO\n- 支持国际化\n- 同时支持[Travis-CI](https://travis-ci.org/aquariuslt/blog/)，[Circle-CI](https://circleci.com/gh/aquariuslt/blog) 构建和发布\n- 将覆盖率报告展现在[coveralls.io](https://coveralls.io/github/aquariuslt/blog)中\n\n## Structure/Design/Dependencies Update\n\n目前代码结构/框架选型/测试流程上的改进包括好几个方面\n\n### Config Design\n\n- 修改了入口配置文件`application.yml`的 schema，结构更加扁平\n- 抽离`google site verification`到配置文件里\n\n### Build Flow\n\n- 将读取`*.md`文件的工具类，从 Gulp Tasks 中抽取出来，目的是将来该工具类可以单独分离成一个模块。目前该模块功能是根据源代码生成合适的 api-schema 的内容，并且在`marked`的功能上做了一个 wrapper，实现自定义 header，自定义代码区块高亮，自定义 id 生成样式等功能\n- 添加生成符合 RSS 规范的相关文件的 Gulp Tasks\n- 添加测试相关的 Gulp Tasks\n- 添加生成静态子页面的 Gulp Task\n\n### Testing Flow\n\n- 目前的测试流程，与语言框架无关的部分，主要是使用`karma` + `webpack` + `mocha` + `sinon` + `chai` +`puppeteer`来构建整体的测试流程。\n- 覆盖率报告方面，主要是使用了`karma`的`spec coverage reporter`插件 来生成较为通用的`lcov.info`报告文件，方便与各大开放的覆盖率报告平台集成。\n- 与语言框架相关的部分，根据 beta 版本的`@vue/test-utils` 的官方推荐单元测试编写方法改写了各大组件的测试前置代码(最新的几个版本坑有点多，大概是与那些在代码里面强行加入了 SSR 的检测之类的改动导致体验挺糟糕的)\n- 使用了`moxios`这个`axios`官方的 mockup lib 来做模拟 http 请求方面的测试\n\n### Dependencies/3rd Party Lib Selection\n\n- PWA 相关配置方面，移除了从利用`sw-preache`构建出 PWA 相关文件的 Gulp，改而采用`offline-plugin` + runtime 模式来切分开发环境与生产环境的的加载。\n- webpack 和相关官方插件升级到 3 的最新版(重构之间 webpack 还发布了 4，但是有点破坏性的改动还没找到合适的替代方案，所以暂时观望和调试中)\n- 添加`vue-i18n`做国际化\n- 升级 babel 版本到 6 的最新版，重新配置了 babel 相关的配置文件，统一到较合适的阶段\n- `vue-material`也升级到了 v1.0-beta 版本，为新的 API 修改一轮代码\n\n## Benchmark\n\n目前首次页面加载总共需要 280KB 的流量。 ![blog-resource-transfer-time](./blog-resource-transfer-time.png)\n\n![benchmark-blog-website](./benchmark-blog-website.png) 重新用 Chrome 的 Audits 工具做了一次测试(中间有根据提示的一些最佳实践准则进行优化) 之后，主要痛点是首次渲染页面时间比较长。\n\n## TODO\n\n- 重新思考 Markdown 转译工具部分代码的选型(当初选型用 marked 真是真是后悔，完全是照搬 perl 实现)\n- 补全没写的一些单元测试样例\n- 更新`vexo-cli`提供详细的文档和遵循设计规范的背书说明\n","html":"<h1 id=\"latest-update-on-blog-app\">Latest Update on Blog App</h1>\n<p>结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从<code>4.0.0-beta</code> 到了<code>4.0.1</code> ，算是可以标记 release 的一个版本了。</p>\n<p><a href=\"https://github.com/aquariuslt/blog\">项目地址</a>不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。</p>\n<h2 id=\"refactor-background\">Refactor Background</h2>\n<p>其实是很少符合很多最佳实践</p>\n<ul>\n<li>测试流程不完整</li>\n<li>代码抽象结构不够好</li>\n<li>依赖升级不够及时</li>\n<li>Markdown 功能化不够完整(其实这次重构花了很多时间都没有做好)</li>\n<li>之前 Gulp 的部分功能 发现 Webpack 已经有比较成熟的方案可以实现，需要替换</li>\n</ul>\n<h2 id=\"new-features\">New Features</h2>\n<p>目前添加的新功能：</p>\n<ul>\n<li>提供了<code>feed.xml</code>，支持 RSS 功能</li>\n<li>支持 Github Pages SEO</li>\n<li>支持国际化</li>\n<li>同时支持<a href=\"https://travis-ci.org/aquariuslt/blog/\">Travis-CI</a>，<a href=\"https://circleci.com/gh/aquariuslt/blog\">Circle-CI</a> 构建和发布</li>\n<li>将覆盖率报告展现在<a href=\"https://coveralls.io/github/aquariuslt/blog\">coveralls.io</a>中</li>\n</ul>\n<h2 id=\"structuredesigndependencies-update\">Structure/Design/Dependencies Update</h2>\n<p>目前代码结构/框架选型/测试流程上的改进包括好几个方面</p>\n<h3 id=\"config-design\">Config Design</h3>\n<ul>\n<li>修改了入口配置文件<code>application.yml</code>的 schema，结构更加扁平</li>\n<li>抽离<code>google site verification</code>到配置文件里</li>\n</ul>\n<h3 id=\"build-flow\">Build Flow</h3>\n<ul>\n<li>将读取<code>*.md</code>文件的工具类，从 Gulp Tasks 中抽取出来，目的是将来该工具类可以单独分离成一个模块。目前该模块功能是根据源代码生成合适的 api-schema 的内容，并且在<code>marked</code>的功能上做了一个 wrapper，实现自定义 header，自定义代码区块高亮，自定义 id 生成样式等功能</li>\n<li>添加生成符合 RSS 规范的相关文件的 Gulp Tasks</li>\n<li>添加测试相关的 Gulp Tasks</li>\n<li>添加生成静态子页面的 Gulp Task</li>\n</ul>\n<h3 id=\"testing-flow\">Testing Flow</h3>\n<ul>\n<li>目前的测试流程，与语言框架无关的部分，主要是使用<code>karma</code> + <code>webpack</code> + <code>mocha</code> + <code>sinon</code> + <code>chai</code> +<code>puppeteer</code>来构建整体的测试流程。</li>\n<li>覆盖率报告方面，主要是使用了<code>karma</code>的<code>spec coverage reporter</code>插件 来生成较为通用的<code>lcov.info</code>报告文件，方便与各大开放的覆盖率报告平台集成。</li>\n<li>与语言框架相关的部分，根据 beta 版本的<code>@vue/test-utils</code> 的官方推荐单元测试编写方法改写了各大组件的测试前置代码(最新的几个版本坑有点多，大概是与那些在代码里面强行加入了 SSR 的检测之类的改动导致体验挺糟糕的)</li>\n<li>使用了<code>moxios</code>这个<code>axios</code>官方的 mockup lib 来做模拟 http 请求方面的测试</li>\n</ul>\n<h3 id=\"dependencies3rd-party-lib-selection\">Dependencies/3rd Party Lib Selection</h3>\n<ul>\n<li>PWA 相关配置方面，移除了从利用<code>sw-preache</code>构建出 PWA 相关文件的 Gulp，改而采用<code>offline-plugin</code> + runtime 模式来切分开发环境与生产环境的的加载。</li>\n<li>webpack 和相关官方插件升级到 3 的最新版(重构之间 webpack 还发布了 4，但是有点破坏性的改动还没找到合适的替代方案，所以暂时观望和调试中)</li>\n<li>添加<code>vue-i18n</code>做国际化</li>\n<li>升级 babel 版本到 6 的最新版，重新配置了 babel 相关的配置文件，统一到较合适的阶段</li>\n<li><code>vue-material</code>也升级到了 v1.0-beta 版本，为新的 API 修改一轮代码</li>\n</ul>\n<h2 id=\"benchmark\">Benchmark</h2>\n<p>目前首次页面加载总共需要 280KB 的流量。 <img src=\"/posts/2018/03/03/latest-update-on-blog-app/blog-resource-transfer-time.png\" alt=\"blog-resource-transfer-time\"></p>\n<p><img src=\"/posts/2018/03/03/latest-update-on-blog-app/benchmark-blog-website.png\" alt=\"benchmark-blog-website\"> 重新用 Chrome 的 Audits 工具做了一次测试(中间有根据提示的一些最佳实践准则进行优化) 之后，主要痛点是首次渲染页面时间比较长。</p>\n<h2 id=\"todo\">TODO</h2>\n<ul>\n<li>重新思考 Markdown 转译工具部分代码的选型(当初选型用 marked 真是真是后悔，完全是照搬 perl 实现)</li>\n<li>补全没写的一些单元测试样例</li>\n<li>更新<code>vexo-cli</code>提供详细的文档和遵循设计规范的背书说明</li>\n</ul>\n","disqus":{"shortname":"aquariuslt","url":"https://zexo.dev/posts/2018/03/03/latest-update-on-blog-app","identifier":"-posts-2018-03-03-latest-update-on-blog-app"}}}