{"key":"vue-version-for-blog-app","url":"https://blog.aquariuslt.com/posts/2017/05/05/vue-version-for-blog-app","path":"/posts/2017/05/05/vue-version-for-blog-app","title":"Vue Version Blog App | Aquariuslt Blog","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://blog.aquariuslt.com","name":"Home","position":1},{"@type":"ListItem","item":"https://blog.aquariuslt.com/posts","name":"Posts","position":2},{"@type":"ListItem","item":"https://blog.aquariuslt.com/posts/2017/05/05/vue-version-for-blog-app","name":"Vue Version Blog App","position":3}]},"type":"DETAIL","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"Aquariuslt Blog"},{"name":"og:type","content":"website"},{"name":"og:title","content":"Vue Version Blog App"},{"name":"og:description","content":"这篇文章写于 2017-05-05. 下面一部分没实现的功能已经基本实现，并且做了更多的配置外化工作.详情将会发布到新的一篇文章里面.在阅读过 Vue 的官方文档之后,我尝试用其为一个数据可视化项目的图表做一个 Refine,以寻求渲染性能与响应变化上性能的提升,与更细致,可自定义的动画效果.\n"},{"name":"og:image","content":"./cover.png"},{"name":"og:type","content":"article"}],"data":{"title":"Vue Version Blog App","id":"vue-version-for-blog-app","created":"2017-05-05T00:00:00.000Z","updated":"2017-05-05T00:00:00.000Z","categories":[{"id":"blog","label":"Blog","total":0,"link":"/categories/blog"}],"tags":[{"id":"blog","label":"Blog","total":0,"link":"/tags/blog"},{"id":"vue","label":"Vue","total":1,"link":"/tags/vue"},{"id":"pwa","label":"PWA","total":2,"link":"/tags/pwa"}],"cover":"/posts/2017/05/05/vue-version-for-blog-app/cover.png","images":[],"toc":[{"label":"Vue Version Blog App","level":1,"id":"vue-version-blog-app","position":0,"children":[{"label":"Change Log","level":2,"id":"change-log","position":1,"children":[],"pid":0},{"label":"Background","level":2,"id":"background","position":2,"children":[],"pid":0},{"label":"Features","level":2,"id":"features","position":3,"children":[],"pid":0},{"label":"Development","level":2,"id":"development","position":4,"children":[{"label":"Dependencies","level":3,"id":"dependencies","position":5,"children":[],"pid":4},{"label":"Development Course","level":3,"id":"development-course","position":6,"children":[],"pid":4}],"pid":0},{"label":"Usage & Document","level":2,"id":"usage-document","position":7,"children":[],"pid":0}],"pid":-1}],"summary":"这篇文章写于 2017-05-05. 下面一部分没实现的功能已经基本实现，并且做了更多的配置外化工作.详情将会发布到新的一篇文章里面.在阅读过 Vue 的官方文档之后,我尝试用其为一个数据可视化项目的图表做一个 Refine,以寻求渲染性能与响应变化上性能的提升,与更细致,可自定义的动画效果.\n","src":"\n# Vue Version Blog App\n\n## Change Log\n\n这篇文章写于 2017-05-05. 下面一部分没实现的功能已经基本实现，并且做了更多的配置外化工作.\n\n详情将会发布到新的一篇文章里面.\n\n## Background\n\n在阅读过 Vue 的官方文档之后,我尝试用其为一个数据可视化项目的图表做一个 Refine,以寻求渲染性能与响应变化上性能的提升,与更细致,可自定义的动画效果.\n\n虽然 Vue 是一个渐进式的前端框架,但是突然想以 Vue 全家桶去实现一次 Angular1.x 项目中所有的功能,于是便以自己的 Blog App 作为一个初始项目进行练手.\n\n从四月份开始进行 Vue 的学习,目前 Vue 版本的 Blog App 已经实现了[@Angular 版本](https://github.com/Aquariuslt/Blog/tree/NG2)的所有功能.\n\n记录一下中间的历程.\n\n根据目前所做的工作,\n\n代码放在[Vue 分支](https://github.com/Aquariuslt/Blog)上.\n\n## Features\n\n目前实现的功能有:\n\n- Single Page Application [单页应用]\n- Progressive Web Application [渐进式网页应用]\n- Markdown Writing [使用 Markdown 进行写作]\n- Support Code Highlight [支持代码高亮]\n- Disqus [支持 Disqus 评论]\n- Configurable [抽取配置到独立的配置文件]\n- Sitemap auto generating [自动生成 Sitemap]\n\n中间有一些跌坑之后还在纠结于没找到优雅的解决方案的地方:\n\n- No Support Pre-rendering [不支持预渲染]\n  > 为单页应用进行预渲染,生成对应的静态 index.html,可以有效被搜索引擎收录 Vue 本身支持 webpack 的`prerender-spa-plugin`. 但`Vue-Material`的菜单展开方式是动态渲染的,所以目前还不能做到预渲染.(这里跌了几天的坑) 目前部署在 Github Pages 上的话会没有 SEO. 因为 SPA 在搜索引擎爬的时候会先返回一个 404,再根据 Github 的约定返回 404.html. 搜索引擎就把该 url 当成失效的链接. 部署在 VPS 上的话支持 SEO.\n\n## Development\n\n### Dependencies\n\n为了实现与 Angular 版本相同的效果,才用的 Vue 全家桶 + 其他主要的库是\n\n- Vue [2.3.2]\n- Vuex\n- Vue-Router\n- VueMaterial\n- Axios [前后端通用的 http 请求框架]\n- Marked [Markdown 解析部分]\n- Hightlight.js [为 Markdown 的代码片段渲染出高亮效果]\n\n### Development Course\n\n从头到尾,大概的功能开发思路是如此的:\n\n1. 阅读 Vue + Vuex + Vue-Router 的文档\n2. 学习 Vue-Webpack Template 中的项目结构与构建方式\n3. 重写基于 Marked 的 Markdown Post API\n4. 确定基本的 Gulp 构建任务流\n5. 以纯 ES6 的方式修改 Webpack 与 Gulp 任务流\n6. 使用 Vue 全家桶完成基本界面开发\n7. 重构应用部分的代码成模块化加载方式\n8. 添加 PWA,Sitemap 等功能\n9. 添加 CI 配置\n\n## Usage & Document\n\n参见: [Blog App Usage](https://github.com/Aquariuslt/Blog/tree/VUE#usage)\n","html":"<h1 id=\"vue-version-blog-app\">Vue Version Blog App</h1>\n<h2 id=\"change-log\">Change Log</h2>\n<p>这篇文章写于 2017-05-05. 下面一部分没实现的功能已经基本实现，并且做了更多的配置外化工作.</p>\n<p>详情将会发布到新的一篇文章里面.</p>\n<h2 id=\"background\">Background</h2>\n<p>在阅读过 Vue 的官方文档之后,我尝试用其为一个数据可视化项目的图表做一个 Refine,以寻求渲染性能与响应变化上性能的提升,与更细致,可自定义的动画效果.</p>\n<p>虽然 Vue 是一个渐进式的前端框架,但是突然想以 Vue 全家桶去实现一次 Angular1.x 项目中所有的功能,于是便以自己的 Blog App 作为一个初始项目进行练手.</p>\n<p>从四月份开始进行 Vue 的学习,目前 Vue 版本的 Blog App 已经实现了<a href=\"https://github.com/Aquariuslt/Blog/tree/NG2\">@Angular 版本</a>的所有功能.</p>\n<p>记录一下中间的历程.</p>\n<p>根据目前所做的工作,</p>\n<p>代码放在<a href=\"https://github.com/Aquariuslt/Blog\">Vue 分支</a>上.</p>\n<h2 id=\"features\">Features</h2>\n<p>目前实现的功能有:</p>\n<ul>\n<li>Single Page Application [单页应用]</li>\n<li>Progressive Web Application [渐进式网页应用]</li>\n<li>Markdown Writing [使用 Markdown 进行写作]</li>\n<li>Support Code Highlight [支持代码高亮]</li>\n<li>Disqus [支持 Disqus 评论]</li>\n<li>Configurable [抽取配置到独立的配置文件]</li>\n<li>Sitemap auto generating [自动生成 Sitemap]</li>\n</ul>\n<p>中间有一些跌坑之后还在纠结于没找到优雅的解决方案的地方:</p>\n<ul>\n<li>No Support Pre-rendering [不支持预渲染]\n<blockquote>\n<p>为单页应用进行预渲染,生成对应的静态 index.html,可以有效被搜索引擎收录 Vue 本身支持 webpack 的<code>prerender-spa-plugin</code>. 但<code>Vue-Material</code>的菜单展开方式是动态渲染的,所以目前还不能做到预渲染.(这里跌了几天的坑) 目前部署在 Github Pages 上的话会没有 SEO. 因为 SPA 在搜索引擎爬的时候会先返回一个 404,再根据 Github 的约定返回 404.html. 搜索引擎就把该 url 当成失效的链接. 部署在 VPS 上的话支持 SEO.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"development\">Development</h2>\n<h3 id=\"dependencies\">Dependencies</h3>\n<p>为了实现与 Angular 版本相同的效果,才用的 Vue 全家桶 + 其他主要的库是</p>\n<ul>\n<li>Vue [2.3.2]</li>\n<li>Vuex</li>\n<li>Vue-Router</li>\n<li>VueMaterial</li>\n<li>Axios [前后端通用的 http 请求框架]</li>\n<li>Marked [Markdown 解析部分]</li>\n<li>Hightlight.js [为 Markdown 的代码片段渲染出高亮效果]</li>\n</ul>\n<h3 id=\"development-course\">Development Course</h3>\n<p>从头到尾,大概的功能开发思路是如此的:</p>\n<ol>\n<li>阅读 Vue + Vuex + Vue-Router 的文档</li>\n<li>学习 Vue-Webpack Template 中的项目结构与构建方式</li>\n<li>重写基于 Marked 的 Markdown Post API</li>\n<li>确定基本的 Gulp 构建任务流</li>\n<li>以纯 ES6 的方式修改 Webpack 与 Gulp 任务流</li>\n<li>使用 Vue 全家桶完成基本界面开发</li>\n<li>重构应用部分的代码成模块化加载方式</li>\n<li>添加 PWA,Sitemap 等功能</li>\n<li>添加 CI 配置</li>\n</ol>\n<h2 id=\"usage-document\">Usage &amp; Document</h2>\n<p>参见: <a href=\"https://github.com/Aquariuslt/Blog/tree/VUE#usage\">Blog App Usage</a></p>\n","disqus":{"shortname":"aquariuslt","url":"https://blog.aquariuslt.com/posts/2017/05/05/vue-version-for-blog-app","identifier":"-posts-2017-05-05-vue-version-for-blog-app"}}}