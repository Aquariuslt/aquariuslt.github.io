{"key":"apache-shiro-spring-integration","url":"https://blog.aquariuslt.com/posts/2015/10/25/apache-shiro-spring-integration","path":"/posts/2015/10/25/apache-shiro-spring-integration","title":"Spring 整合 Apache Shiro 实现各等级的权限管理 | TL; DR","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://blog.aquariuslt.com","name":"Home","position":1},{"@type":"ListItem","item":"https://blog.aquariuslt.com/posts","name":"Posts","position":2},{"@type":"ListItem","item":"https://blog.aquariuslt.com/posts/2015/10/25/apache-shiro-spring-integration","name":"Spring 整合 Apache Shiro 实现各等级的权限管理","position":3}]},"type":"DETAIL","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"TL; DR"},{"name":"og:type","content":"website"},{"name":"og:title","content":"Spring 整合 Apache Shiro 实现各等级的权限管理"},{"name":"og:description","content":"前几个月在做一个常规的权限隔离功能的时候,恰好使用过 Apache Shiro. Apache Shiro 是一款 Java 的安全框架,通常用作 Web 应用的权限校验,身份验证.Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.\n"},{"name":"og:image","content":"./cover.png"},{"name":"og:type","content":"article"},{"name":"description","content":"前几个月在做一个常规的权限隔离功能的时候,恰好使用过 Apache Shiro. Apache Shiro 是一款 Java 的安全框架,通常用作 Web 应用的权限校验,身份验证.Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.\n"}],"data":{"title":"Spring 整合 Apache Shiro 实现各等级的权限管理","id":"apache-shiro-spring-integration","created":"2015-10-25T00:00:00.000Z","updated":"2015-10-25T00:00:00.000Z","categories":[{"id":"blog","label":"Blog","total":0,"link":"/categories/blog"}],"tags":[{"id":"spring","label":"Spring","total":0,"link":"/tags/spring"},{"id":"security","label":"Security","total":1,"link":"/tags/security"},{"id":"shiro","label":"Shiro","total":2,"link":"/tags/shiro"},{"id":"java","label":"Java","total":3,"link":"/tags/java"}],"cover":"/posts/2015/10/25/apache-shiro-spring-integration/cover.png","images":[],"toc":[{"label":"Spring 整合 Apache Shiro 实现各等级的权限管理","level":1,"id":"spring-整合-apache-shiro-实现各等级的权限管理","position":0,"children":[{"label":"Background","level":2,"id":"background","position":1,"children":[],"pid":0},{"label":"权限控制","level":2,"id":"权限控制","position":2,"children":[{"label":"URL 级别的权限控制","level":3,"id":"url-级别的权限控制","position":3,"children":[{"label":"业务场景假设","level":4,"id":"业务场景假设","position":4,"children":[],"pid":3},{"label":"Shiro 基本配置","level":4,"id":"shiro-基本配置","position":5,"children":[{"label":"Maven","level":5,"id":"maven","position":6,"children":[],"pid":5},{"label":"web.xml","level":5,"id":"webxml","position":7,"children":[],"pid":5},{"label":"Spring ApplicationContext.xml","level":5,"id":"spring-applicationcontextxml","position":8,"children":[],"pid":5},{"label":"Spring applicationContext-shiro-captcha.xml","level":5,"id":"spring-applicationcontext-shiro-captchaxml","position":9,"children":[],"pid":5}],"pid":3},{"label":"配置详解","level":4,"id":"配置详解","position":10,"children":[{"label":"登录与注销","level":5,"id":"登录与注销","position":11,"children":[{"label":"登录","level":6,"id":"登录","position":12,"children":[],"pid":11},{"label":"注销","level":6,"id":"注销","position":13,"children":[],"pid":11}],"pid":10},{"label":"同步登录与异步登陆","level":5,"id":"同步登录与异步登陆","position":14,"children":[],"pid":10},{"label":"角色校验","level":5,"id":"角色校验","position":15,"children":[],"pid":10}],"pid":3}],"pid":2}],"pid":0},{"label":"Summary","level":2,"id":"summary","position":16,"children":[],"pid":0}],"pid":-1}],"summary":"前几个月在做一个常规的权限隔离功能的时候,恰好使用过 Apache Shiro. Apache Shiro 是一款 Java 的安全框架,通常用作 Web 应用的权限校验,身份验证.Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.\n","src":"\n# Spring 整合 Apache Shiro 实现各等级的权限管理\n\n## Background\n\n前几个月在做一个常规的权限隔离功能的时候,恰好使用过 Apache Shiro. Apache Shiro 是一款 Java 的安全框架,通常用作 Web 应用的权限校验,身份验证.\n\n> Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.\n\n在参考过 IBM 开发社区关于 Shiro 的博客 一篇文章 [在 Web 项目中应用 Apache Shiro](https://www.ibm.com/developerworks/cn/java/j-lo-shiro/) 与开涛博客的一个跟我学 Shiro 系列文章 [开涛博客-跟我学 Shiro](https://jinnianshilongnian.iteye.com/blog/2024723)\n\n> 不得不说的是 IBM Developer 社区的文章一向属于生动易懂. 但是上面的这篇讲得并没有之前推荐的讲 Spring-DataJPA 的那篇文章那样浅显, 于是才有了现在这份笔记\n\n## 权限控制\n\n我所接触到的权限控制大概可以分成两个级别 URL 和方法级别.\n\n以常见的论坛用户来举例.论坛用户简要的分成两种 管理员`Admin`,普通用户`Normal`. 其中管理员能够进入用户管理,帖子管理的页面进行 CRUD 操作. 普通用户则只能进行自己帖子的 CRU 操作,以及顶贴什么的.\n\n如果只进行 URL 级别的拦截,只需要在每一个 URL 的访问时 获取用户的角色是`Admin`还是`Normal`即可.\n\n如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等). 但是由于跟数据库的设计密切相关,所以这个级别不细讲. 言归正传(不知道是不是看 light 大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解\n\n### URL 级别的权限控制\n\n#### 业务场景假设\n\n首先,我们假设有以下几种种 URL\n\n```\n/user/create        //用户创建,Admin专属\n/post/create        //发帖 Admin,Normal共有\n/login              //登陆\n/logout             //注销\n```\n\n#### Shiro 基本配置\n\n##### Maven\n\n`$<shiro.version>`请自行替换成当前的最新版本\n\n```xml\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>${shiro.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>${shiro.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-web</artifactId>\n    <version>${shiro.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-ehcache</artifactId>\n    <version>${shiro.version}</version>\n</dependency>\n```\n\n##### web.xml\n\n为了实现与 Spring 同一个级别的 URL 拦截,需要将 Shiro 的 Filter 配置在 Spring MVC 的 Dispatcher Servlet 同一个级别\n\n```xml\n<filter>\n    <filter-name>shiroFilter</filter-name>\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n    <init-param>\n        <param-name>targetFilterLifecycle</param-name>\n        <param-value>true</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>shiroFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n##### Spring ApplicationContext.xml\n\n在与 Spring 进行整合的时候,为了方便拼切配置,在 Spring 里面导入另一份专用于 Shiro 的 xml 配置\n\n```xml\n<import resource=\"config/security/applicationContext-shiro-captcha.xml\"/>\n```\n\n##### Spring applicationContext-shiro-captcha.xml\n\n先将整个 shiro 的 xml 配置贴出来,接下来在逐一解说其内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"https://www.springframework.org/schema/beans\" xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\"\n       default-lazy-init=\"true\">\n\n    <description>Shiro安全配置</description>\n\n    <!-- Shiro's main business-tier object for web-enabled applications -->\n    <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <property name=\"realm\" ref=\"shiroRealm\"/>\n        <property name=\"cacheManager\" ref=\"shiroEhcacheManager\"/>\n    </bean>\n\n    <!-- 項目自定义的Realm -->\n    <bean id=\"shiroRealm\" class=\"com.quariuslt.service.security.BookingShiroRealm\">\n        <property name=\"loginSessionService\" ref=\"loginSessionService\"/>\n        <property name=\"userService\" ref=\"userService\"/>\n        <property name=\"cacheManager\" ref=\"shiroEhcacheManager\"/>\n    </bean>\n\n    <!-- 用户授权信息Cache, 采用EhCache -->\n    <bean id=\"shiroEhcacheManager\" class=\"org.apache.shiro.cache.ehcache.EhCacheManager\">\n        <property name=\"cacheManagerConfigFile\" value=\"classpath:config/security/ehcache-shiro.xml\"/>\n    </bean>\n\n    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->\n    <bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n\n    <bean class=\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\">\n        <property name=\"securityManager\" ref=\"securityManager\"/>\n    </bean>\n\n    <bean id=\"captchaFilter\" class=\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\"/>\n    <bean id=\"adminPermissionFilter\" class=\"com.quariuslt.service.security.AdminPermissionFilter\"/>\n    <bean id=\"normalPermissionFilter\" class=\"com.quariuslt.service.security.NormalPermissionFilter\"/>\n\n    <!-- Shiro Filter -->\n    <bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n        <property name=\"securityManager\" ref=\"securityManager\"/>\n        <property name=\"loginUrl\" value=\"/login\"/>\n        <property name=\"successUrl\" value=\"/booking/search\"/>\n        <property name=\"unauthorizedUrl\" value=\"/\"/>\n        <property name=\"filters\">\n            <map>\n                <entry key=\"authc\" value-ref=\"captchaFilter\"/>\n                <!--<entry key=\"roles[admin]\" value-ref=\"captchaFilter\"/>-->\n                <!--<entry key=\"roles[normal]\" value-ref=\"captchaFilter\"/>-->\n            </map>\n        </property>\n        <property name=\"filterChainDefinitions\">\n            <value>\n                /=authc\n                /register = anon\n                /forgot =anon\n                /login = anon\n                /login/action* = anon\n                /logout = logout\n                /js/** = anon\n                /rest/**=anon\n                /image/**=anon\n                /jawr_loader.js=anon\n                /user/create=roles[admin]\n                /post/create/**=roles[normal|admin]\n                /** =authc\n            </value>\n        </property>\n    </bean>\n\n</beans>\n```\n\n#### 配置详解\n\n首先要理解一件事情,就是 Shiro 的权限控制 源自于 Web.xml 的 Filter,在 Filter 中获取目标 URL 的请求,解析以达到根据请求是否到达下一集 Filter 的作用. 再要理解一件约定大于配置的问题,了解 Shiro 的一些默认配置解说.\n\n在贴出来的`shiro-captcha.xml`配置代码中:\n\n```xml\n<!-- Shiro Filter -->\n<bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n    <property name=\"securityManager\" ref=\"securityManager\"/>\n    <property name=\"loginUrl\" value=\"/login\"/>\n    <property name=\"successUrl\" value=\"/booking/search\"/>\n    <property name=\"unauthorizedUrl\" value=\"/\"/>\n    <property name=\"filters\">\n        <map>\n            <entry key=\"authc\" value-ref=\"captchaFilter\"/>\n            <!--<entry key=\"roles[admin]\" value-ref=\"captchaFilter\"/>-->\n            <!--<entry key=\"roles[normal]\" value-ref=\"captchaFilter\"/>-->\n        </map>\n    </property>\n    <property name=\"filterChainDefinitions\">\n        <value>\n            /=authc\n            /register = anon\n            /forgot =anon\n            /login = anon\n            /login/action* = anon\n            /logout = logout\n            /js/** = anon\n            /rest/**=anon\n            /image/**=anon\n            /jawr_loader.js=anon\n            /user/create=roles[admin]\n            /post/create/**=roles[normal|admin]\n            /** =authc\n        </value>\n    </property>\n</bean>\n```\n\n先来看`<property name=\"filterChainDefinitions\">`中的属性. <values>的内容,其实是 url 对应权限的一些 mapping.表示对应的 url mapping 需要对应的权限. 其中`authc`,`anon`,`logout`样例中提及的这三个,是 Shiro 自己的默认配置\n\n> `authc`表示,这这个 mapping 代表的 url 需要登陆之后才能查看 `anon`表示,这个 mapping 代表的 url 全部放行,所以可以看到所有 js 文件与 image 文件都被放行了 `logout` 表示这个 mapping 代表的 url 将进行一次注销操作,在浏览器客户端进行的是 session 的注销,在服务器端则是进行缓存的删除\n\n其中 `roles[admin],roles[normal|admin]` 则是自己定义的过滤规则. 表示`/user/create`只有角色包含`admin`的有权限访问且`/post/create`则是角色是`admin`或`normal`的有权限访问\n\n##### 登录与注销\n\n###### 登录\n\n对于所有需要登录的 URL 可以通过 `authc`一个拦截器来拦截在未登录的状态下,所有所有需要登录的 URL 都是自动跳转到上面 XML 所配置的`loginUrl`之中. 当然这里返回的是 一个对 `/login`路径的 get 请求\n\n```xml\n<property name=\"loginUrl\" value=\"/login\"/>\n```\n\n###### 注销\n\n注销也很简单,只要任意 url 能够跳转到`/logout`,便会自动注销.\n\n##### 同步登录与异步登陆\n\n其实在 Shiro 的配置中,通过阅读源码可以看出,其实`loginUrl`一个属性,代表的是当 Method=Get 的请求到达其值对应的 url(/login)时,返回登录的页面. 当 Method=Post 的请求到达其值对应的 url(/login)时,进入到的就是 Shiro 本身的登陆操作该操作,通过读取`securityManager`的配置,\n\n```xml\n<property name=\"securityManager\" ref=\"securityManager\"/>\n```\n\n通过自定义的 realm `BookingShiroRealm`\n\n> 此处`BookingShiroRealm`是自己定义的名称,只是为了符合但是的业务需要起的名字\n\n```xml\n<!-- Shiro's main business-tier object for web-enabled applications -->\n<bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n    <property name=\"realm\" ref=\"shiroRealm\"/>\n    <property name=\"cacheManager\" ref=\"shiroEhcacheManager\"/>\n</bean>\n\n<!-- 項目自定义的Realm -->\n<bean id=\"shiroRealm\" class=\"com.quariuslt.service.security.BookingShiroRealm\">\n    <property name=\"loginSessionService\" ref=\"loginSessionService\"/>\n    <property name=\"userService\" ref=\"userService\"/>\n    <property name=\"cacheManager\" ref=\"shiroEhcacheManager\"/>\n</bean>\n```\n\n接下来解说一下 `BookingShiroRealm.java` 的内容\n\n```Java\npublic class BookingShiroRealm extends AuthorizingRealm {\n    public static final String LOGIN_SESSION_NAME=\"loginSession\";\n    public static final String SIMPLE_AUTHORIZATION_INFO=\"simpleAuthorizationInfo\";\n\n    private LoginSessionService loginSessionService;\n\n    private UserService userService;\n\n\n    public LoginSessionService getLoginSessionService() {\n        return loginSessionService;\n    }\n\n    public void setLoginSessionService(LoginSessionService loginSessionService) {\n        this.loginSessionService = loginSessionService;\n    }\n\n    public UserService getUserService() {\n        return userService;\n    }\n\n    public void setUserService(UserService userService) {\n        this.userService = userService;\n    }\n\n    /*授权信息*/\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();\n        if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){\n            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);\n        }\n        if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){\n\n            UserDto userDto=userService.findUserById(loginSession.getUserId());\n            if (userDto != null) {\n                SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n                Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());\n                for(RoleDto roleDto:roleDtoSet){\n                    info.addRole(roleDto.getName().toLowerCase());\n                }\n\n                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);\n            } else {\n                return null;\n            }\n        }\n        return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);\n    }\n\n    /*认证信息*/\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        System.out.println(\"Come to BookingShiroRealm\");\n        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;\n        String userId=token.getUsername();\n        String cryptedPassword= String.valueOf(token.getPassword());\n        if(StringUtils.isNotEmpty(userId)){\n            UserDto targetUser=userService.getByUserId(userId);\n            System.out.println(\"TargetUser:\"+userId+\" InputPassWord:\"+cryptedPassword+\" DB PassWord:\"+targetUser.getCryptedPassword());\n            if(cryptedPassword.equals(targetUser.getCryptedPassword())){\n                System.out.println(\"BookingShiroRealm:Login Success\");\n                LoginSession loginSession=new LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());\n                loginSessionService.clearSessionByUserId(userId);\n                loginSessionService.save(loginSession);\n                return new SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());\n            }\n        }\n        return null;\n    }\n}\n\n```\n\n`AuthorizingRealm`是 Shiro 负责身份认证的抽象类. 需要实现其`doGetAuthenticationInfo`方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程. 和实现其`doGetAuthorizationInfo`方法,实现对需要登陆之后 对权限的认证.\n\n在说到登陆的校验之前,可以看到在`doGetAuthenticationInfo`方法里面 有一个 authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢. 此时返回来回到 Spring 配置 Shiro 的 xml `applicationContext-shiro-captcha.xml` 会发现\n\n```xml\n<property name=\"filters\">\n    <map>\n        <entry key=\"authc\" value-ref=\"captchaFilter\"/>\n        <entry key=\"roles[admin]\" value-ref=\"captchaFilter\"/>\n        <entry key=\"roles[normal]\" value-ref=\"captchaFilter\"/>\n    </map>\n</property>\n```\n\n里面会有一个`captchaFilter`, 指向其注入的类 `CaptchaFormAuthenticationFilter.java`\n\n附上`CaptchaFormAuthenticationFilter`代码\n\n```Java\npublic class CaptchaFormAuthenticationFilter extends FormAuthenticationFilter {\n\n    public static final String DEFAULT_CAPTCHA_PARAM = \"captcha\";\n\n    private String captchaParam = DEFAULT_CAPTCHA_PARAM;\n\n    public String getCaptchaParam() {\n\n        return captchaParam;\n\n    }\n\n    protected String getCaptcha(ServletRequest request) {\n\n        return WebUtils.getCleanParam(request, getCaptchaParam());\n\n    }\n\n    @Override\n    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {\n        setFailureAttribute(request, e);\n        return true;\n    }\n\n    @Override\n    protected void setFailureAttribute(ServletRequest request, AuthenticationException ae) {\n        String className = ae.getClass().getName();\n        request.setAttribute(getFailureKeyAttribute(), className);\n    }\n\n    //这里进行密码的加密\n    @Override\n    protected CaptchaUsernamePasswordToken createToken(ServletRequest request, ServletResponse response) {\n        System.out.println(\"Come to CreateToken\");\n        String username = getUsername(request);\n        String password = getPassword(request);\n        String captcha = getCaptcha(request);\n        boolean rememberMe = isRememberMe(request);\n        String host = getHost(request);\n\n        System.out.println(\"Captcha UserName(UserId):\" + username);\n        System.out.println(\"Captcha Password:\" + password);\n        System.out.println(\"Captcha RememberMe:\" + rememberMe);\n\n\n        return new CaptchaUsernamePasswordToken(username,\n                password.toCharArray(), rememberMe, host, captcha);\n\n    }\n\n\n    @Override\n    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception {\n        CaptchaUsernamePasswordToken token = createToken(request, response);\n\n        try {\n            System.out.println(\"Execute Login~\");\n            Subject subject = getSubject(request, response);\n            subject.login(token);\n\n            return onLoginSuccess(token,subject, request, response);\n        } catch (AuthenticationException e) {\n            return onLoginFailure(token,e, request, response);\n        }\n    }\n}\n```\n\n继承`FormAuthenticationFilter`的`CaptchaFormAuthenticationFilter`并重写其`CaptchaUsernamePasswordToken`方法. 用于通过`/login`的 POST 方式提交过来的时候,便会先经过此 filter 的`createToken`方法进行 token 的生成\n\n假设有一个登陆页面的`/login`使用同步提交方式,即通过页面的 form 表单,`action=\"/login\"`,`method=\"POST\"`提交到后台,触发流程是\n\n> 1. 到达 `FormAuthenticationFilter` 根据表单 生成 Token.\n> 2. 调用 Shiro 专门处理认证的 `subject`其`login`方法进行登陆\n> 3. `login`方法 通过调用 自定义的`BookingShiroRealm`方法所实现的顶级接口 来实现对数据库的信息的读取\n> 4. 判定登陆用户名与密码 匹配之后,可以通过 Shiro 自己配置的缓存保存认证信息.\n\n但是在这个时代,还通过同步登陆 实在是太 TM 捞了,其实异步登陆提交,只需要 手动调用 subject.login 方法即可将第一步到达`FormAuthenticationFilter`的 token 手动生成\n\n异步登陆的实现代码 大概如下(以 Controller 为例)\n\n```Java\n@RequestMapping(value = \"/action\", method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)\n@ResponseBody\npublic LoginMessage loginAction(\n        @RequestParam(value = \"username\") String username,\n        @RequestParam(value = \"password\") String password,\n        @RequestParam(value = \"rememberMe\", required = false, defaultValue = \"false\") boolean rememberMe,\n        ServletRequest request) {\n    LoginMessage loginMessage = new LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());\n    Subject subject = SecurityUtils.getSubject();\n\n\n    //尝试获取 跳转到Login前的那个页面的url\n    if(null != WebUtils.getSavedRequest(request)) {\n        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();\n        loginMessage.setRedirect(requestURI);\n    }\n\n    try {\n        String salt=userService.getByUserId(username).getSalt();\n        UsernamePasswordToken token = new UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));\n        subject.login(token);\n        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());\n\n        //尝试判断 用户是不是第一次登陆\n        UserDto currentUser=userService.getByUserId(username);\n        if (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){\n            String redirectPath=request.getServletContext().getContextPath()+\"/user/password/reset\";\n            loginMessage.setRedirect(redirectPath);\n        }\n\n\n    } catch (UnknownAccountException e) {\n        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());\n    } catch (IncorrectCredentialsException |NullPointerException e) {\n        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());\n    } catch (AuthenticationException e) {\n        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());\n    }\n    return loginMessage;\n}\n\nclass LoginMessage {\n    private String status;\n    private String message;\n    private String redirect;\n\n    public LoginMessage(String status) {\n        this.status = status;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getRedirect() {\n        return redirect;\n    }\n\n    public void setRedirect(String redirect) {\n        this.redirect = redirect;\n    }\n}\n```\n\n##### 角色校验\n\n登陆的时候,其实只是实现了 `登陆认证`,`缓存登录信息`的过程. 并没有实现,`权限赋予`的过程.只有第一次遇到 需要登陆且特定权限的 url 的时候,才会请求后台是否有进入对应 url 的权限.\n\n在讲权限之前,概括一下数据库的设计\n\n```SQL\nCREATE TABLE USERS\n(\n    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,\n    ACTIVE BIT NOT NULL,\n    ADDRESS VARCHAR(300),\n    CITY VARCHAR(50),\n    COMPANY VARCHAR(20),\n    COUNTRY VARCHAR(50),\n    CRYPTED_PASSWORD VARCHAR(255),\n    DEPARTMENT VARCHAR(20),\n    DISPLAY_NAME VARCHAR(128),\n    EMAIL VARCHAR(60) NOT NULL,\n    FAX VARCHAR(100),\n    FIRST_NAME VARCHAR(40),\n    GENDER VARCHAR(6),\n    JOBTITLE VARCHAR(100),\n    LAST_NAME VARCHAR(40),\n    LOCATION VARCHAR(50),\n    MIDDLE_NAME VARCHAR(40),\n    OFFICE VARCHAR(20),\n    OFFICECODE VARCHAR(22),\n    PHONE VARCHAR(128),\n    SALT VARCHAR(255) NOT NULL,\n    STAFFID VARCHAR(20),\n    STAFFROLE VARCHAR(15),\n    TERRITORY VARCHAR(100),\n    USERID VARCHAR(20) NOT NULL\n);\n\n\nCREATE TABLE ROLES\n(\n    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,\n    DESCRIPTION VARCHAR(255),\n    NAME VARCHAR(255) NOT NULL\n);\nCREATE UNIQUE INDEX UK_OFX66KERUAPI6VYQPV6F2OR37 ON ROLES (NAME);\n\nCREATE TABLE ROLE_USER\n(\n    ROLE_ID BIGINT NOT NULL,\n    USER_ID BIGINT NOT NULL,\n    PRIMARY KEY (ROLE_ID, USER_ID),\n    FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ID),\n    FOREIGN KEY (USER_ID) REFERENCES USERS (ID)\n);\n\nCREATE INDEX FK_NJAJEL6A2Q8TR36EMB9L8VW7N ON ROLE_USER (USER_ID);\n\n```\n\n数据库有三个表 `USERS`,`ROLES`,`USER_ROLE` 其实在设计上`User`表跟`ROLE`表是多对多的关系,即 User 里面有一个 Set<Role>,Role 里面也有一个 Set<User> 通过中间表`USER_ROLE`来实现多对多关联.\n\n下面来看 身份认证的具体实现 `BookingShiroRealm.java`\n\n```Java\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();\n    if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){\n        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);\n    }\n    if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){\n\n        UserDto userDto=userService.findUserById(loginSession.getUserId());\n        if (userDto != null) {\n            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n            Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());\n            for(RoleDto roleDto:roleDtoSet){\n                info.addRole(roleDto.getName().toLowerCase());\n            }\n\n            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);\n        } else {\n            return null;\n        }\n    }\n    return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);\n}\n```\n\n通过\n\n```Java\nSubject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)\n```\n\n来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在 Session 里面. 当需要对应的权限,且发现已经有`SIMPLE_AUTHORIZATION_INFO`这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.\n\n当然 对应权限的获取,也是通过 shiro 配置里面的 captchaFilter 的具体实现类,实现其`isAccessAllowed`方法来判定.\n\n## Summary\n\n本次主要分享了 Share 如何在 Spring 中整合 Apache Shiro 的过程. 但是整体配置依然是通过 XML 统一配置,其实 Shiro 在近期的版本已经有了 Annotation 级别的方法能够方便的对 URL 的 Mapping 进行注解. 具体的应用过程,就像 Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.\n","html":"<h1 id=\"spring-整合-apache-shiro-实现各等级的权限管理\">Spring 整合 Apache Shiro 实现各等级的权限管理</h1>\n<h2 id=\"background\">Background</h2>\n<p>前几个月在做一个常规的权限隔离功能的时候,恰好使用过 Apache Shiro. Apache Shiro 是一款 Java 的安全框架,通常用作 Web 应用的权限校验,身份验证.</p>\n<blockquote>\n<p>Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p>\n</blockquote>\n<p>在参考过 IBM 开发社区关于 Shiro 的博客 一篇文章 <a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-shiro/\">在 Web 项目中应用 Apache Shiro</a> 与开涛博客的一个跟我学 Shiro 系列文章 <a href=\"https://jinnianshilongnian.iteye.com/blog/2024723\">开涛博客-跟我学 Shiro</a></p>\n<blockquote>\n<p>不得不说的是 IBM Developer 社区的文章一向属于生动易懂. 但是上面的这篇讲得并没有之前推荐的讲 Spring-DataJPA 的那篇文章那样浅显, 于是才有了现在这份笔记</p>\n</blockquote>\n<h2 id=\"权限控制\">权限控制</h2>\n<p>我所接触到的权限控制大概可以分成两个级别 URL 和方法级别.</p>\n<p>以常见的论坛用户来举例.论坛用户简要的分成两种 管理员<code>Admin</code>,普通用户<code>Normal</code>. 其中管理员能够进入用户管理,帖子管理的页面进行 CRUD 操作. 普通用户则只能进行自己帖子的 CRU 操作,以及顶贴什么的.</p>\n<p>如果只进行 URL 级别的拦截,只需要在每一个 URL 的访问时 获取用户的角色是<code>Admin</code>还是<code>Normal</code>即可.</p>\n<p>如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等). 但是由于跟数据库的设计密切相关,所以这个级别不细讲. 言归正传(不知道是不是看 light 大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解</p>\n<h3 id=\"url-级别的权限控制\">URL 级别的权限控制</h3>\n<h4 id=\"业务场景假设\">业务场景假设</h4>\n<p>首先,我们假设有以下几种种 URL</p>\n<pre class=\"hljs\"><code>/user/create        //用户创建,Admin专属\n/post/create        //发帖 Admin,Normal共有\n/login              //登陆\n/logout             //注销\n</code></pre>\n<h4 id=\"shiro-基本配置\">Shiro 基本配置</h4>\n<h5 id=\"maven\">Maven</h5>\n<p><code>$&lt;shiro.version&gt;</code>请自行替换成当前的最新版本</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${shiro.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${shiro.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${shiro.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-ehcache<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${shiro.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h5 id=\"webxml\">web.xml</h5>\n<p>为了实现与 Spring 同一个级别的 URL 拦截,需要将 Shiro 的 Filter 配置在 Spring MVC 的 Dispatcher Servlet 同一个级别</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>shiroFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-class</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">init-param</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>targetFilterLifecycle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-mapping</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>shiroFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-mapping</span>&gt;</span>\n</code></pre>\n<h5 id=\"spring-applicationcontextxml\">Spring ApplicationContext.xml</h5>\n<p>在与 Spring 进行整合的时候,为了方便拼切配置,在 Spring 里面导入另一份专用于 Shiro 的 xml 配置</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">import</span> <span class=\"hljs-attr\">resource</span>=<span class=\"hljs-string\">\"config/security/applicationContext-shiro-captcha.xml\"</span>/&gt;</span>\n</code></pre>\n<h5 id=\"spring-applicationcontext-shiro-captchaxml\">Spring applicationContext-shiro-captcha.xml</h5>\n<p>先将整个 shiro 的 xml 配置贴出来,接下来在逐一解说其内容</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"https://www.springframework.org/schema/beans\"</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"https://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\"</span>\n       <span class=\"hljs-attr\">default-lazy-init</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>Shiro安全配置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"securityManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"realm\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"shiroRealm\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"shiroEhcacheManager\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 項目自定义的Realm --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"shiroRealm\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.quariuslt.service.security.BookingShiroRealm\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"loginSessionService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"loginSessionService\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"userService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"userService\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"shiroEhcacheManager\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 用户授权信息Cache, 采用EhCache --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"shiroEhcacheManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.cache.ehcache.EhCacheManager\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheManagerConfigFile\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"classpath:config/security/ehcache-shiro.xml\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"lifecycleBeanPostProcessor\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"</span>/&gt;</span>\n\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"securityManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"securityManager\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"captchaFilter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"adminPermissionFilter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.quariuslt.service.security.AdminPermissionFilter\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"normalPermissionFilter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.quariuslt.service.security.NormalPermissionFilter\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Shiro Filter --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"shiroFilter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"securityManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"securityManager\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"loginUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/login\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"successUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/booking/search\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"unauthorizedUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"filters\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"authc\"</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">\"captchaFilter\"</span>/&gt;</span>\n                <span class=\"hljs-comment\">&lt;!--&lt;entry key=\"roles[admin]\" value-ref=\"captchaFilter\"/&gt;--&gt;</span>\n                <span class=\"hljs-comment\">&lt;!--&lt;entry key=\"roles[normal]\" value-ref=\"captchaFilter\"/&gt;--&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"filterChainDefinitions\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>\n                /=authc\n                /register = anon\n                /forgot =anon\n                /login = anon\n                /login/action* = anon\n                /logout = logout\n                /js/** = anon\n                /rest/**=anon\n                /image/**=anon\n                /jawr_loader.js=anon\n                /user/create=roles[admin]\n                /post/create/**=roles[normal|admin]\n                /** =authc\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h4 id=\"配置详解\">配置详解</h4>\n<p>首先要理解一件事情,就是 Shiro 的权限控制 源自于 Web.xml 的 Filter,在 Filter 中获取目标 URL 的请求,解析以达到根据请求是否到达下一集 Filter 的作用. 再要理解一件约定大于配置的问题,了解 Shiro 的一些默认配置解说.</p>\n<p>在贴出来的<code>shiro-captcha.xml</code>配置代码中:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Shiro Filter --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"shiroFilter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"securityManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"securityManager\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"loginUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/login\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"successUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/booking/search\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"unauthorizedUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"filters\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"authc\"</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">\"captchaFilter\"</span>/&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&lt;entry key=\"roles[admin]\" value-ref=\"captchaFilter\"/&gt;--&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--&lt;entry key=\"roles[normal]\" value-ref=\"captchaFilter\"/&gt;--&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"filterChainDefinitions\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>\n            /=authc\n            /register = anon\n            /forgot =anon\n            /login = anon\n            /login/action* = anon\n            /logout = logout\n            /js/** = anon\n            /rest/**=anon\n            /image/**=anon\n            /jawr_loader.js=anon\n            /user/create=roles[admin]\n            /post/create/**=roles[normal|admin]\n            /** =authc\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>先来看<code>&lt;property name=&quot;filterChainDefinitions&quot;&gt;</code>中的属性. &lt;values&gt;的内容,其实是 url 对应权限的一些 mapping.表示对应的 url mapping 需要对应的权限. 其中<code>authc</code>,<code>anon</code>,<code>logout</code>样例中提及的这三个,是 Shiro 自己的默认配置</p>\n<blockquote>\n<p><code>authc</code>表示,这这个 mapping 代表的 url 需要登陆之后才能查看 <code>anon</code>表示,这个 mapping 代表的 url 全部放行,所以可以看到所有 js 文件与 image 文件都被放行了 <code>logout</code> 表示这个 mapping 代表的 url 将进行一次注销操作,在浏览器客户端进行的是 session 的注销,在服务器端则是进行缓存的删除</p>\n</blockquote>\n<p>其中 <code>roles[admin],roles[normal|admin]</code> 则是自己定义的过滤规则. 表示<code>/user/create</code>只有角色包含<code>admin</code>的有权限访问且<code>/post/create</code>则是角色是<code>admin</code>或<code>normal</code>的有权限访问</p>\n<h5 id=\"登录与注销\">登录与注销</h5>\n<h6 id=\"登录\">登录</h6>\n<p>对于所有需要登录的 URL 可以通过 <code>authc</code>一个拦截器来拦截在未登录的状态下,所有所有需要登录的 URL 都是自动跳转到上面 XML 所配置的<code>loginUrl</code>之中. 当然这里返回的是 一个对 <code>/login</code>路径的 get 请求</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"loginUrl\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"/login\"</span>/&gt;</span>\n</code></pre>\n<h6 id=\"注销\">注销</h6>\n<p>注销也很简单,只要任意 url 能够跳转到<code>/logout</code>,便会自动注销.</p>\n<h5 id=\"同步登录与异步登陆\">同步登录与异步登陆</h5>\n<p>其实在 Shiro 的配置中,通过阅读源码可以看出,其实<code>loginUrl</code>一个属性,代表的是当 Method=Get 的请求到达其值对应的 url(/login)时,返回登录的页面. 当 Method=Post 的请求到达其值对应的 url(/login)时,进入到的就是 Shiro 本身的登陆操作该操作,通过读取<code>securityManager</code>的配置,</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"securityManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"securityManager\"</span>/&gt;</span>\n</code></pre>\n<p>通过自定义的 realm <code>BookingShiroRealm</code></p>\n<blockquote>\n<p>此处<code>BookingShiroRealm</code>是自己定义的名称,只是为了符合但是的业务需要起的名字</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"securityManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"realm\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"shiroRealm\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"shiroEhcacheManager\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- 項目自定义的Realm --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"shiroRealm\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.quariuslt.service.security.BookingShiroRealm\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"loginSessionService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"loginSessionService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"userService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"userService\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"cacheManager\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"shiroEhcacheManager\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<p>接下来解说一下 <code>BookingShiroRealm.java</code> 的内容</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookingShiroRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AuthorizingRealm</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String LOGIN_SESSION_NAME=<span class=\"hljs-string\">\"loginSession\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String SIMPLE_AUTHORIZATION_INFO=<span class=\"hljs-string\">\"simpleAuthorizationInfo\"</span>;\n\n    <span class=\"hljs-keyword\">private</span> LoginSessionService loginSessionService;\n\n    <span class=\"hljs-keyword\">private</span> UserService userService;\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LoginSessionService <span class=\"hljs-title\">getLoginSessionService</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> loginSessionService;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setLoginSessionService</span><span class=\"hljs-params\">(LoginSessionService loginSessionService)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.loginSessionService = loginSessionService;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserService <span class=\"hljs-title\">getUserService</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> userService;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUserService</span><span class=\"hljs-params\">(UserService userService)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.userService = userService;\n    }\n\n    <span class=\"hljs-comment\">/*授权信息*/</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthorizationInfo <span class=\"hljs-title\">doGetAuthorizationInfo</span><span class=\"hljs-params\">(PrincipalCollection principals)</span> </span>{\n        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();\n        <span class=\"hljs-keyword\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\"hljs-keyword\">null</span>){\n            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);\n        }\n        <span class=\"hljs-keyword\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\"hljs-keyword\">null</span>){\n\n            UserDto userDto=userService.findUserById(loginSession.getUserId());\n            <span class=\"hljs-keyword\">if</span> (userDto != <span class=\"hljs-keyword\">null</span>) {\n                SimpleAuthorizationInfo info = <span class=\"hljs-keyword\">new</span> SimpleAuthorizationInfo();\n                Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());\n                <span class=\"hljs-keyword\">for</span>(RoleDto roleDto:roleDtoSet){\n                    info.addRole(roleDto.getName().toLowerCase());\n                }\n\n                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);\n    }\n\n    <span class=\"hljs-comment\">/*认证信息*/</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthenticationInfo <span class=\"hljs-title\">doGetAuthenticationInfo</span><span class=\"hljs-params\">(AuthenticationToken authenticationToken)</span> <span class=\"hljs-keyword\">throws</span> AuthenticationException </span>{\n        System.out.println(<span class=\"hljs-string\">\"Come to BookingShiroRealm\"</span>);\n        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;\n        String userId=token.getUsername();\n        String cryptedPassword= String.valueOf(token.getPassword());\n        <span class=\"hljs-keyword\">if</span>(StringUtils.isNotEmpty(userId)){\n            UserDto targetUser=userService.getByUserId(userId);\n            System.out.println(<span class=\"hljs-string\">\"TargetUser:\"</span>+userId+<span class=\"hljs-string\">\" InputPassWord:\"</span>+cryptedPassword+<span class=\"hljs-string\">\" DB PassWord:\"</span>+targetUser.getCryptedPassword());\n            <span class=\"hljs-keyword\">if</span>(cryptedPassword.equals(targetUser.getCryptedPassword())){\n                System.out.println(<span class=\"hljs-string\">\"BookingShiroRealm:Login Success\"</span>);\n                LoginSession loginSession=<span class=\"hljs-keyword\">new</span> LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());\n                loginSessionService.clearSessionByUserId(userId);\n                loginSessionService.save(loginSession);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n}\n\n</code></pre>\n<p><code>AuthorizingRealm</code>是 Shiro 负责身份认证的抽象类. 需要实现其<code>doGetAuthenticationInfo</code>方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程. 和实现其<code>doGetAuthorizationInfo</code>方法,实现对需要登陆之后 对权限的认证.</p>\n<p>在说到登陆的校验之前,可以看到在<code>doGetAuthenticationInfo</code>方法里面 有一个 authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢. 此时返回来回到 Spring 配置 Shiro 的 xml <code>applicationContext-shiro-captcha.xml</code> 会发现</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"filters\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"authc\"</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">\"captchaFilter\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"roles[admin]\"</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">\"captchaFilter\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"roles[normal]\"</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">\"captchaFilter\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n</code></pre>\n<p>里面会有一个<code>captchaFilter</code>, 指向其注入的类 <code>CaptchaFormAuthenticationFilter.java</code></p>\n<p>附上<code>CaptchaFormAuthenticationFilter</code>代码</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CaptchaFormAuthenticationFilter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">FormAuthenticationFilter</span> </span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String DEFAULT_CAPTCHA_PARAM = <span class=\"hljs-string\">\"captcha\"</span>;\n\n    <span class=\"hljs-keyword\">private</span> String captchaParam = DEFAULT_CAPTCHA_PARAM;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getCaptchaParam</span><span class=\"hljs-params\">()</span> </span>{\n\n        <span class=\"hljs-keyword\">return</span> captchaParam;\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> String <span class=\"hljs-title\">getCaptcha</span><span class=\"hljs-params\">(ServletRequest request)</span> </span>{\n\n        <span class=\"hljs-keyword\">return</span> WebUtils.getCleanParam(request, getCaptchaParam());\n\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">onLoginFailure</span><span class=\"hljs-params\">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> </span>{\n        setFailureAttribute(request, e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFailureAttribute</span><span class=\"hljs-params\">(ServletRequest request, AuthenticationException ae)</span> </span>{\n        String className = ae.getClass().getName();\n        request.setAttribute(getFailureKeyAttribute(), className);\n    }\n\n    <span class=\"hljs-comment\">//这里进行密码的加密</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> CaptchaUsernamePasswordToken <span class=\"hljs-title\">createToken</span><span class=\"hljs-params\">(ServletRequest request, ServletResponse response)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"Come to CreateToken\"</span>);\n        String username = getUsername(request);\n        String password = getPassword(request);\n        String captcha = getCaptcha(request);\n        <span class=\"hljs-keyword\">boolean</span> rememberMe = isRememberMe(request);\n        String host = getHost(request);\n\n        System.out.println(<span class=\"hljs-string\">\"Captcha UserName(UserId):\"</span> + username);\n        System.out.println(<span class=\"hljs-string\">\"Captcha Password:\"</span> + password);\n        System.out.println(<span class=\"hljs-string\">\"Captcha RememberMe:\"</span> + rememberMe);\n\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> CaptchaUsernamePasswordToken(username,\n                password.toCharArray(), rememberMe, host, captcha);\n\n    }\n\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">executeLogin</span><span class=\"hljs-params\">(ServletRequest request, ServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        CaptchaUsernamePasswordToken token = createToken(request, response);\n\n        <span class=\"hljs-keyword\">try</span> {\n            System.out.println(<span class=\"hljs-string\">\"Execute Login~\"</span>);\n            Subject subject = getSubject(request, response);\n            subject.login(token);\n\n            <span class=\"hljs-keyword\">return</span> onLoginSuccess(token,subject, request, response);\n        } <span class=\"hljs-keyword\">catch</span> (AuthenticationException e) {\n            <span class=\"hljs-keyword\">return</span> onLoginFailure(token,e, request, response);\n        }\n    }\n}\n</code></pre>\n<p>继承<code>FormAuthenticationFilter</code>的<code>CaptchaFormAuthenticationFilter</code>并重写其<code>CaptchaUsernamePasswordToken</code>方法. 用于通过<code>/login</code>的 POST 方式提交过来的时候,便会先经过此 filter 的<code>createToken</code>方法进行 token 的生成</p>\n<p>假设有一个登陆页面的<code>/login</code>使用同步提交方式,即通过页面的 form 表单,<code>action=&quot;/login&quot;</code>,<code>method=&quot;POST&quot;</code>提交到后台,触发流程是</p>\n<blockquote>\n<ol>\n<li>到达 <code>FormAuthenticationFilter</code> 根据表单 生成 Token.</li>\n<li>调用 Shiro 专门处理认证的 <code>subject</code>其<code>login</code>方法进行登陆</li>\n<li><code>login</code>方法 通过调用 自定义的<code>BookingShiroRealm</code>方法所实现的顶级接口 来实现对数据库的信息的读取</li>\n<li>判定登陆用户名与密码 匹配之后,可以通过 Shiro 自己配置的缓存保存认证信息.</li>\n</ol>\n</blockquote>\n<p>但是在这个时代,还通过同步登陆 实在是太 TM 捞了,其实异步登陆提交,只需要 手动调用 subject.login 方法即可将第一步到达<code>FormAuthenticationFilter</code>的 token 手动生成</p>\n<p>异步登陆的实现代码 大概如下(以 Controller 为例)</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">@RequestMapping</span>(value = <span class=\"hljs-string\">\"/action\"</span>, method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)\n<span class=\"hljs-meta\">@ResponseBody</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LoginMessage <span class=\"hljs-title\">loginAction</span><span class=\"hljs-params\">(\n        @RequestParam(value = <span class=\"hljs-string\">\"username\"</span>)</span> String username,\n        @<span class=\"hljs-title\">RequestParam</span><span class=\"hljs-params\">(value = <span class=\"hljs-string\">\"password\"</span>)</span> String password,\n        @<span class=\"hljs-title\">RequestParam</span><span class=\"hljs-params\">(value = <span class=\"hljs-string\">\"rememberMe\"</span>, required = <span class=\"hljs-keyword\">false</span>, defaultValue = <span class=\"hljs-string\">\"false\"</span>)</span> <span class=\"hljs-keyword\">boolean</span> rememberMe,\n        ServletRequest request) </span>{\n    LoginMessage loginMessage = <span class=\"hljs-keyword\">new</span> LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());\n    Subject subject = SecurityUtils.getSubject();\n\n\n    <span class=\"hljs-comment\">//尝试获取 跳转到Login前的那个页面的url</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">null</span> != WebUtils.getSavedRequest(request)) {\n        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();\n        loginMessage.setRedirect(requestURI);\n    }\n\n    <span class=\"hljs-keyword\">try</span> {\n        String salt=userService.getByUserId(username).getSalt();\n        UsernamePasswordToken token = <span class=\"hljs-keyword\">new</span> UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));\n        subject.login(token);\n        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());\n\n        <span class=\"hljs-comment\">//尝试判断 用户是不是第一次登陆</span>\n        UserDto currentUser=userService.getByUserId(username);\n        <span class=\"hljs-keyword\">if</span> (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){\n            String redirectPath=request.getServletContext().getContextPath()+<span class=\"hljs-string\">\"/user/password/reset\"</span>;\n            loginMessage.setRedirect(redirectPath);\n        }\n\n\n    } <span class=\"hljs-keyword\">catch</span> (UnknownAccountException e) {\n        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());\n    } <span class=\"hljs-keyword\">catch</span> (IncorrectCredentialsException |NullPointerException e) {\n        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());\n    } <span class=\"hljs-keyword\">catch</span> (AuthenticationException e) {\n        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());\n    }\n    <span class=\"hljs-keyword\">return</span> loginMessage;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginMessage</span> </span>{\n    <span class=\"hljs-keyword\">private</span> String status;\n    <span class=\"hljs-keyword\">private</span> String message;\n    <span class=\"hljs-keyword\">private</span> String redirect;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LoginMessage</span><span class=\"hljs-params\">(String status)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.status = status;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getStatus</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> status;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStatus</span><span class=\"hljs-params\">(String status)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.status = status;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getMessage</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> message;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMessage</span><span class=\"hljs-params\">(String message)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.message = message;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getRedirect</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> redirect;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setRedirect</span><span class=\"hljs-params\">(String redirect)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.redirect = redirect;\n    }\n}\n</code></pre>\n<h5 id=\"角色校验\">角色校验</h5>\n<p>登陆的时候,其实只是实现了 <code>登陆认证</code>,<code>缓存登录信息</code>的过程. 并没有实现,<code>权限赋予</code>的过程.只有第一次遇到 需要登陆且特定权限的 url 的时候,才会请求后台是否有进入对应 url 的权限.</p>\n<p>在讲权限之前,概括一下数据库的设计</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">USERS</span>\n(\n    <span class=\"hljs-keyword\">ID</span> <span class=\"hljs-built_in\">BIGINT</span> PRIMARY <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n    ACTIVE <span class=\"hljs-built_in\">BIT</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n    ADDRESS <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">300</span>),\n    CITY <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">50</span>),\n    COMPANY <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">20</span>),\n    COUNTRY <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">50</span>),\n    CRYPTED_PASSWORD <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>),\n    DEPARTMENT <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">20</span>),\n    DISPLAY_NAME <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">128</span>),\n    EMAIL <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">60</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n    FAX <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">100</span>),\n    FIRST_NAME <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">40</span>),\n    GENDER <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">6</span>),\n    JOBTITLE <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">100</span>),\n    LAST_NAME <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">40</span>),\n    LOCATION <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">50</span>),\n    MIDDLE_NAME <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">40</span>),\n    OFFICE <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">20</span>),\n    OFFICECODE <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">22</span>),\n    PHONE <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">128</span>),\n    <span class=\"hljs-keyword\">SALT</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n    STAFFID <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">20</span>),\n    STAFFROLE <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">15</span>),\n    TERRITORY <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">100</span>),\n    USERID <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n);\n\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">ROLES</span>\n(\n    <span class=\"hljs-keyword\">ID</span> <span class=\"hljs-built_in\">BIGINT</span> PRIMARY <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n    DESCRIPTION <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>),\n    <span class=\"hljs-keyword\">NAME</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>\n);\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">INDEX</span> UK_OFX66KERUAPI6VYQPV6F2OR37 <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">ROLES</span> (<span class=\"hljs-keyword\">NAME</span>);\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> ROLE_USER\n(\n    ROLE_ID <span class=\"hljs-built_in\">BIGINT</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n    USER_ID <span class=\"hljs-built_in\">BIGINT</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n    PRIMARY <span class=\"hljs-keyword\">KEY</span> (ROLE_ID, USER_ID),\n    <span class=\"hljs-keyword\">FOREIGN</span> <span class=\"hljs-keyword\">KEY</span> (ROLE_ID) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-keyword\">ROLES</span> (<span class=\"hljs-keyword\">ID</span>),\n    <span class=\"hljs-keyword\">FOREIGN</span> <span class=\"hljs-keyword\">KEY</span> (USER_ID) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-keyword\">USERS</span> (<span class=\"hljs-keyword\">ID</span>)\n);\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">INDEX</span> FK_NJAJEL6A2Q8TR36EMB9L8VW7N <span class=\"hljs-keyword\">ON</span> ROLE_USER (USER_ID);\n\n</code></pre>\n<p>数据库有三个表 <code>USERS</code>,<code>ROLES</code>,<code>USER_ROLE</code> 其实在设计上<code>User</code>表跟<code>ROLE</code>表是多对多的关系,即 User 里面有一个 Set&lt;Role&gt;,Role 里面也有一个 Set&lt;User&gt; 通过中间表<code>USER_ROLE</code>来实现多对多关联.</p>\n<p>下面来看 身份认证的具体实现 <code>BookingShiroRealm.java</code></p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthorizationInfo <span class=\"hljs-title\">doGetAuthorizationInfo</span><span class=\"hljs-params\">(PrincipalCollection principals)</span> </span>{\n    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();\n    <span class=\"hljs-keyword\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\"hljs-keyword\">null</span>){\n        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);\n    }\n    <span class=\"hljs-keyword\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\"hljs-keyword\">null</span>){\n\n        UserDto userDto=userService.findUserById(loginSession.getUserId());\n        <span class=\"hljs-keyword\">if</span> (userDto != <span class=\"hljs-keyword\">null</span>) {\n            SimpleAuthorizationInfo info = <span class=\"hljs-keyword\">new</span> SimpleAuthorizationInfo();\n            Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());\n            <span class=\"hljs-keyword\">for</span>(RoleDto roleDto:roleDtoSet){\n                info.addRole(roleDto.getName().toLowerCase());\n            }\n\n            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);\n}\n</code></pre>\n<p>通过</p>\n<pre class=\"hljs\"><code>Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)\n</code></pre>\n<p>来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在 Session 里面. 当需要对应的权限,且发现已经有<code>SIMPLE_AUTHORIZATION_INFO</code>这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.</p>\n<p>当然 对应权限的获取,也是通过 shiro 配置里面的 captchaFilter 的具体实现类,实现其<code>isAccessAllowed</code>方法来判定.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>本次主要分享了 Share 如何在 Spring 中整合 Apache Shiro 的过程. 但是整体配置依然是通过 XML 统一配置,其实 Shiro 在近期的版本已经有了 Annotation 级别的方法能够方便的对 URL 的 Mapping 进行注解. 具体的应用过程,就像 Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.</p>\n","disqus":{"shortname":"aquariuslt","url":"https://blog.aquariuslt.com/posts/2015/10/25/apache-shiro-spring-integration","identifier":"-posts-2015-10-25-apache-shiro-spring-integration"}}}