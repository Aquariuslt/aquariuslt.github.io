{"key":"beanutils-vs-reflection","url":"https://zexo.dev/posts/2015/11/10/beanutils-vs-reflection","path":"/posts/2015/11/10/beanutils-vs-reflection","title":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils | zexo.dev","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://zexo.dev","name":"Home","position":1},{"@type":"ListItem","item":"https://zexo.dev/posts","name":"Posts","position":2},{"@type":"ListItem","item":"https://zexo.dev/posts/2015/11/10/beanutils-vs-reflection","name":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils","position":3}]},"type":"DETAIL","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-2"},{"name":"og:site_name","content":"zexo.dev"},{"name":"og:type","content":"website"},{"name":"og:title","itemprop":"name","content":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils"},{"name":"og:description","itemprop":"description","content":"最近老大分配了个性能优化的任务,因为主要页面在 Production 上打开的时间太长,(大概 7s?卧槽 第一次听到的时候还以为我听错了). 居然这么慢.. 其实是有主程序大大带着我做,所以在扫了一遍前端 ExtJS 的结构之后,发现错综复杂四年以来不同技术层次的人都在同一个页面上添油加醋, 了解以前的需求之后完全重构基本是不可能的,所以前端的性能优化就交给主程序大大,我跑去扫一下服务器端有什么性能瓶颈.\n"},{"name":"og:image","itemprop":"image","content":"https:/zexo.dev/posts/2015/11/10/beanutils-vs-reflection/cover.png"},{"name":"og:type","content":"article"},{"name":"description","itemprop":"description","content":"最近老大分配了个性能优化的任务,因为主要页面在 Production 上打开的时间太长,(大概 7s?卧槽 第一次听到的时候还以为我听错了). 居然这么慢.. 其实是有主程序大大带着我做,所以在扫了一遍前端 ExtJS 的结构之后,发现错综复杂四年以来不同技术层次的人都在同一个页面上添油加醋, 了解以前的需求之后完全重构基本是不可能的,所以前端的性能优化就交给主程序大大,我跑去扫一下服务器端有什么性能瓶颈.\n"}],"data":{"title":"记一次神奇的优化过程:Java反射 VS Apache BeanUtils VS Spring BeanUtils","id":"beanutils-vs-reflection","created":"2015-11-10T00:00:00.000Z","updated":"2015-11-10T00:00:00.000Z","categories":[{"id":"blog","label":"Blog","total":0,"link":"/categories/blog"}],"tags":[{"id":"java","label":"Java","total":0,"link":"/tags/java"},{"id":"apache","label":"Apache","total":1,"link":"/tags/apache"}],"cover":"/posts/2015/11/10/beanutils-vs-reflection/cover.png","images":["./method-executing-time.png"],"toc":[{"label":"记一次神奇的优化过程:Java 反射 VS Apache BeanUtils VS Spring BeanUtils","level":1,"id":"记一次神奇的优化过程java-反射-vs-apache-beanutils-vs-spring-beanutils","position":0,"children":[],"pid":-1},{"label":"Background","level":2,"id":"background","position":1,"children":[],"pid":0},{"label":"使用 JProfiler 分析 代码性能","level":3,"id":"使用-jprofiler-分析-代码性能","position":2,"children":[],"pid":1},{"label":"IntelliJ IDEA 集成 JProfiler 监控 Weblogic 实例","level":4,"id":"intellij-idea-集成-jprofiler-监控-weblogic-实例","position":3,"children":[],"pid":2},{"label":"通过 JProfiler 分析方法执行时间","level":4,"id":"通过-jprofiler-分析方法执行时间","position":4,"children":[],"pid":2},{"label":"正文:性能优化部分","level":3,"id":"正文性能优化部分","position":5,"children":[],"pid":1},{"label":"Summary","level":2,"id":"summary","position":6,"children":[],"pid":0}],"summary":"最近老大分配了个性能优化的任务,因为主要页面在 Production 上打开的时间太长,(大概 7s?卧槽 第一次听到的时候还以为我听错了). 居然这么慢.. 其实是有主程序大大带着我做,所以在扫了一遍前端 ExtJS 的结构之后,发现错综复杂四年以来不同技术层次的人都在同一个页面上添油加醋, 了解以前的需求之后完全重构基本是不可能的,所以前端的性能优化就交给主程序大大,我跑去扫一下服务器端有什么性能瓶颈.\n","src":"\n# 记一次神奇的优化过程:Java 反射 VS Apache BeanUtils VS Spring BeanUtils\n\n## Background\n\n最近老大分配了个性能优化的任务,因为主要页面在 Production 上打开的时间太长,(大概 7s?卧槽 第一次听到的时候还以为我听错了). 居然这么慢.. 其实是有主程序大大带着我做,所以在扫了一遍前端 ExtJS 的结构之后,发现错综复杂四年以来不同技术层次的人都在同一个页面上添油加醋, 了解以前的需求之后完全重构基本是不可能的,所以前端的性能优化就交给主程序大大,我跑去扫一下服务器端有什么性能瓶颈.\n\n### 使用 JProfiler 分析 代码性能\n\n> 通过网上找来的资料,比较了一份周围的资料 IBM 的 [常用 Java Profiling 工具的分析与比较](https://www.ibm.com/developerworks/cn/java/j-lo-profiling/) 最后决定使用 JProfiler 进行性能分析\n\n#### IntelliJ IDEA 集成 JProfiler 监控 Weblogic 实例\n\nidea 集成了 (应该是 JProfiler 本身就带了 idea 的插件安装) 安装之后就会 在启动服务器运行的 按钮多出一个 使用 JProfiler 运行.\n\n> 由于 JProfiler 本身也是通过 javaagent 的方法更改一些类加载运行时策略,所以会跟 Jrebel 冲突. 所以在使用 JProfiler 监控性能的时候,如果之前在 weblogic 服务器运行配置的过程中添加了 jrebel.jar 作为 javaagent 的参数,务必删掉其余配置 与之前的[Jrebel 插件结合 weblogic](https://zexo.dev/posts/2015/10/08/jrebel-configuration-with-weblogic-in-idea/)一样\n\n#### 通过 JProfiler 分析方法执行时间\n\n通过 JProfiler 插件启动 weblogic 服务器实例之后,JProfiler 的 GUI 界面将会启动,并成功监听到对应的实例进程. 实例成功启动之后,下面会有一个 CPU Time 的标签页,选中并点击`record`. 触发任意次目标方法,即可看到所有方法的执行时间\n\n![方法执行时间](./method-executing-time.png)\n\n### 正文:性能优化部分\n\n言归正传,在看到性能分析记录的时候,一个叫做 `ReflectionUtil.convertObjectWithSameFields()` 的方法,方法体如下\n\n```Java\n/**\n* Convert between two Object with the same field, setter and getter\n*\n* @param target\n*            the object wants to be convert to\n* @param source\n*            the object as source of converter\n*/\npublic static void convertObjectToObjectWithSameFields(Object target, Object source) {\n    List<Field> detailFields = new ArrayList<Field>();\n    List<Field> oFields = new ArrayList<Field>();\n    for (Class<?> clas = target.getClass(); clas != Object.class; clas = clas.getSuperclass()) {\n        detailFields.addAll(Arrays.asList(clas.getDeclaredFields()));\n    }\n    for (Class<?> clas = source.getClass(); clas != Object.class; clas = clas.getSuperclass()) {\n        oFields.addAll(Arrays.asList(clas.getDeclaredFields()));\n    }\n    for (Field dField : detailFields) {\n        for (Field oField : oFields) {\n            String targetField = dField.getName();\n            String sourceField = oField.getName();\n            if (targetField.equals(sourceField)) {\n                try {\n                    Object object = getAttributeValue(oField.getName(), source, true);\n                    if (object != null)\n                        setAttributeValue(dField.getName(), object, target, object.getClass());\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}\n```\n\n原来是使用了 JDK 的反射 API,遍历两个 Bean 的属性去进行对应的`getter`,`setter`方法.时间复杂度为 O(n\\*m),(可是到后面发现好像并不是这个时间复杂度的问题,囧). 由于 JDK 原生的 Reflection 比较辣鸡,效率比较慢,所以造成了本次性能瓶颈的原因之一.\n\n一开始先是想到了 Apache CommonUtils 类库里面的 BeanUtils 和 PropertyUtils 来替换同事造的效率很低的轮子通过看源码,大概发现 BeanUtils 是这样实现属性复制的\n\n首先他会将 需要进行属性复制的两个 Bean 抽取出来,然后一个 Map 储存其类型和名字相同的属性. 接着这个 Map 会根据里面的几种属性分成对应的属性(大概是基本类型,List 类型,Map 类型以及自定义类型)\n\n在进行属性复制的时候,会根据该动态 Bean 里面的属性,来找到目标 Bean 是否含有对应的 setProperites 方法,然后调用 源 Bean 的 getProperties 方法.\n\n但是这个 BeanUtils 有个缺点,就是遇到很操蛋的属性(恰好遇到这个情况)的时候,不能对一些属性进行 ignore 操作.\n\n> 原因是需要转换的两个 JavaBean 其实并不是规范的 JavaBean 其中一个 JavaBean 有一个 getter 方法,叫做 getXX() 但是返回的却是 一个 List 集合的第一个元素. 这时候操蛋的另一个 JavaBean 也有一个 setter 方法,叫做 setXX() 但是这个 JavaBean 却是规范的 JavaBean.\n\n最后是使用 Spring-Bean 的 BeanUtils 解决问题的.因为它能够传第一个 ingore 的属性名集合进去,不读这部分.\n\n优化结果是,将原来的轮子替换成 Spring 的 BeanUtils. 结果比在本地测试快了 700ms,希望在 Production 上也有 300+ms 的优化表现.\n\n## Summary\n\n实现不同的 JavaBean(常见场景是 Entity,DTO,VO)之间相同属性名的转化过程,可以利用 BeanUtils.copyProperties 来实现.\n","html":"<h1 id=\"记一次神奇的优化过程java-反射-vs-apache-beanutils-vs-spring-beanutils\">记一次神奇的优化过程:Java 反射 VS Apache BeanUtils VS Spring BeanUtils</h1>\n<h2 id=\"background\">Background</h2>\n<p>最近老大分配了个性能优化的任务,因为主要页面在 Production 上打开的时间太长,(大概 7s?卧槽 第一次听到的时候还以为我听错了). 居然这么慢.. 其实是有主程序大大带着我做,所以在扫了一遍前端 ExtJS 的结构之后,发现错综复杂四年以来不同技术层次的人都在同一个页面上添油加醋, 了解以前的需求之后完全重构基本是不可能的,所以前端的性能优化就交给主程序大大,我跑去扫一下服务器端有什么性能瓶颈.</p>\n<h3 id=\"使用-jprofiler-分析-代码性能\">使用 JProfiler 分析 代码性能</h3>\n<blockquote>\n<p>通过网上找来的资料,比较了一份周围的资料 IBM 的 <a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-profiling/\">常用 Java Profiling 工具的分析与比较</a> 最后决定使用 JProfiler 进行性能分析</p>\n</blockquote>\n<h4 id=\"intellij-idea-集成-jprofiler-监控-weblogic-实例\">IntelliJ IDEA 集成 JProfiler 监控 Weblogic 实例</h4>\n<p>idea 集成了 (应该是 JProfiler 本身就带了 idea 的插件安装) 安装之后就会 在启动服务器运行的 按钮多出一个 使用 JProfiler 运行.</p>\n<blockquote>\n<p>由于 JProfiler 本身也是通过 javaagent 的方法更改一些类加载运行时策略,所以会跟 Jrebel 冲突. 所以在使用 JProfiler 监控性能的时候,如果之前在 weblogic 服务器运行配置的过程中添加了 jrebel.jar 作为 javaagent 的参数,务必删掉其余配置 与之前的<a href=\"https://zexo.dev/posts/2015/10/08/jrebel-configuration-with-weblogic-in-idea/\">Jrebel 插件结合 weblogic</a>一样</p>\n</blockquote>\n<h4 id=\"通过-jprofiler-分析方法执行时间\">通过 JProfiler 分析方法执行时间</h4>\n<p>通过 JProfiler 插件启动 weblogic 服务器实例之后,JProfiler 的 GUI 界面将会启动,并成功监听到对应的实例进程. 实例成功启动之后,下面会有一个 CPU Time 的标签页,选中并点击<code>record</code>. 触发任意次目标方法,即可看到所有方法的执行时间</p>\n<p><img src=\"/posts/2015/11/10/beanutils-vs-reflection/method-executing-time.png\" alt=\"方法执行时间\" loading=\"lazy\"></p>\n<h3 id=\"正文性能优化部分\">正文:性能优化部分</h3>\n<p>言归正传,在看到性能分析记录的时候,一个叫做 <code>ReflectionUtil.convertObjectWithSameFields()</code> 的方法,方法体如下</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n* Convert between two Object with the same field, setter and getter\n*\n* <span class=\"hljs-doctag\">@param</span> target\n*            the object wants to be convert to\n* <span class=\"hljs-doctag\">@param</span> source\n*            the object as source of converter\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">convertObjectToObjectWithSameFields</span><span class=\"hljs-params\">(Object target, Object source)</span> </span>{\n    List&lt;Field&gt; detailFields = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Field&gt;();\n    List&lt;Field&gt; oFields = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Field&gt;();\n    <span class=\"hljs-keyword\">for</span> (Class&lt;?&gt; clas = target.getClass(); clas != Object<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span></span>; clas = clas.getSuperclass()) {\n        detailFields.addAll(Arrays.asList(clas.getDeclaredFields()));\n    }\n    <span class=\"hljs-keyword\">for</span> (Class&lt;?&gt; clas = source.getClass(); clas != Object<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span></span>; clas = clas.getSuperclass()) {\n        oFields.addAll(Arrays.asList(clas.getDeclaredFields()));\n    }\n    <span class=\"hljs-keyword\">for</span> (Field dField : detailFields) {\n        <span class=\"hljs-keyword\">for</span> (Field oField : oFields) {\n            String targetField = dField.getName();\n            String sourceField = oField.getName();\n            <span class=\"hljs-keyword\">if</span> (targetField.equals(sourceField)) {\n                <span class=\"hljs-keyword\">try</span> {\n                    Object object = getAttributeValue(oField.getName(), source, <span class=\"hljs-keyword\">true</span>);\n                    <span class=\"hljs-keyword\">if</span> (object != <span class=\"hljs-keyword\">null</span>)\n                        setAttributeValue(dField.getName(), object, target, object.getClass());\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>原来是使用了 JDK 的反射 API,遍历两个 Bean 的属性去进行对应的<code>getter</code>,<code>setter</code>方法.时间复杂度为 O(n*m),(可是到后面发现好像并不是这个时间复杂度的问题,囧). 由于 JDK 原生的 Reflection 比较辣鸡,效率比较慢,所以造成了本次性能瓶颈的原因之一.</p>\n<p>一开始先是想到了 Apache CommonUtils 类库里面的 BeanUtils 和 PropertyUtils 来替换同事造的效率很低的轮子通过看源码,大概发现 BeanUtils 是这样实现属性复制的</p>\n<p>首先他会将 需要进行属性复制的两个 Bean 抽取出来,然后一个 Map 储存其类型和名字相同的属性. 接着这个 Map 会根据里面的几种属性分成对应的属性(大概是基本类型,List 类型,Map 类型以及自定义类型)</p>\n<p>在进行属性复制的时候,会根据该动态 Bean 里面的属性,来找到目标 Bean 是否含有对应的 setProperites 方法,然后调用 源 Bean 的 getProperties 方法.</p>\n<p>但是这个 BeanUtils 有个缺点,就是遇到很操蛋的属性(恰好遇到这个情况)的时候,不能对一些属性进行 ignore 操作.</p>\n<blockquote>\n<p>原因是需要转换的两个 JavaBean 其实并不是规范的 JavaBean 其中一个 JavaBean 有一个 getter 方法,叫做 getXX() 但是返回的却是 一个 List 集合的第一个元素. 这时候操蛋的另一个 JavaBean 也有一个 setter 方法,叫做 setXX() 但是这个 JavaBean 却是规范的 JavaBean.</p>\n</blockquote>\n<p>最后是使用 Spring-Bean 的 BeanUtils 解决问题的.因为它能够传第一个 ingore 的属性名集合进去,不读这部分.</p>\n<p>优化结果是,将原来的轮子替换成 Spring 的 BeanUtils. 结果比在本地测试快了 700ms,希望在 Production 上也有 300+ms 的优化表现.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>实现不同的 JavaBean(常见场景是 Entity,DTO,VO)之间相同属性名的转化过程,可以利用 BeanUtils.copyProperties 来实现.</p>\n","disqus":{"shortname":"aquariuslt","url":"https://zexo.dev/posts/2015/11/10/beanutils-vs-reflection","identifier":"-posts-2015-11-10-beanutils-vs-reflection"}}}