{"key":"nodejs-oracledb-install-on-rhel-6","url":"https://blog.aquariuslt.com/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6","path":"/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6","title":"RHEL(CentOS)6环境下安装node-oracledb | Aquariuslt Blog","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://blog.aquariuslt.com","name":"Home","position":1},{"@type":"ListItem","item":"https://blog.aquariuslt.com/posts","name":"Posts","position":2},{"@type":"ListItem","item":"https://blog.aquariuslt.com/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6","name":"RHEL(CentOS)6环境下安装node-oracledb","position":3}]},"type":"DETAIL","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"Aquariuslt Blog"},{"name":"og:type","content":"website"},{"name":"og:title","content":"RHEL(CentOS)6环境下安装node-oracledb"},{"name":"og:description","content":"最近准备升级一下 PROD 服务器上的node-oracledb版本. 但是遇到一个很奇怪的现象,就是我本地无法构建出服务器上可用的oracledb. (因为部署方式是打包部署而不是从git拉代码部署)一开始以为是C++运行库的原因. 因为又仔细读了一遍node-oracledb的官方安装文档,发现oracledb在编译的时候,只支持支持C++11的编译器.\n"},{"name":"og:image","content":"./cover.png"},{"name":"og:type","content":"article"}],"data":{"title":"RHEL(CentOS)6环境下安装node-oracledb","id":"nodejs-oracledb-install-on-rhel-6","created":"2016-01-11T00:00:00.000Z","updated":"2016-01-11T00:00:00.000Z","categories":[{"id":"debug","label":"Debug","total":0,"link":"/categories/debug"}],"tags":[{"id":"node","label":"Node","total":0,"link":"/tags/node"},{"id":"linux","label":"Linux","total":1,"link":"/tags/linux"}],"cover":"/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6/cover.png","images":[],"toc":[{"label":"RHEL(CentOS)6 环境下安装 node-oracledb","level":1,"id":"rhelcentos6-环境下安装-node-oracledb","position":0,"children":[{"label":"Background","level":2,"id":"background","position":1,"children":[],"pid":0},{"label":"RootCause","level":2,"id":"rootcause","position":2,"children":[],"pid":0},{"label":"Solution","level":2,"id":"solution","position":3,"children":[],"pid":0}],"pid":-1}],"summary":"最近准备升级一下 PROD 服务器上的node-oracledb版本. 但是遇到一个很奇怪的现象,就是我本地无法构建出服务器上可用的oracledb. (因为部署方式是打包部署而不是从git拉代码部署)一开始以为是C++运行库的原因. 因为又仔细读了一遍node-oracledb的官方安装文档,发现oracledb在编译的时候,只支持支持C++11的编译器.\n","src":"\n# RHEL(CentOS)6 环境下安装 node-oracledb\n\n## Background\n\n最近准备升级一下 PROD 服务器上的`node-oracledb`版本. 但是遇到一个很奇怪的现象,就是我本地无法构建出服务器上可用的`oracledb`. (因为部署方式是打包部署而不是从`git`拉代码部署)\n\n一开始以为是`C++运行库`的原因. 因为又仔细读了一遍`node-oracledb`的官方安装文档,发现`oracledb`在编译的时候,只支持支持`C++11`的编译器.\n\n立马查看本地环境的`gcc`版本与运行库版本`glibc`\n\n```\ngcc -v\nldd --version\n```\n\n发现本地`CentOS 6.6`版本自带的`gcc`版本是 4.4,`glibc`版本是 2.12 但是支持编译和运行 C++11 新特性的`gcc`版本是 4.7+,`glibc`版本是 2.14+ 这.版本都不一样怎么玩.\n\n## RootCause\n\n马上比较了一下 本地构建`oracledb`与服务器的各种版本发现相关的版本信息如下:\n\n> 服务器 OS:RedHat Enterprise Linux 6.6 gcc Version:4.4 (Red Hat) glibc Version:2.12 node Version:v0.10.38 npm Version:1.4.28(npm 版本应该不会影响构建,预防万一还是提及一下) node-gyp Version:不明.因为没权限调用该命令. oracle instantclient Version:11.2\n\n> 本地环境 OS:CentOS 6.7 x64 gcc Version:4.4 (Red Hat) glibc Version:2.12 node Version:v4.2.4 npm Version:2.14.8 node-gyp Version:3.2.1 oracle instantclient Version:11.2\n\n## Solution\n\n思前想后,想想也不知道`node.js`本身版本到底会对`oracledb`的构建有什么影响. 毕竟`oracledb`官方对构建时的`C++11`编译支持的要求先入为主了\n\n最后还是决定先切换一下`node.js`版本,结果问题顺利解决\n\n```sh\n$npm install n\n$n v0.10.38\n$npm install oracledb\n```\n\n构建成功.\n","html":"<h1 id=\"rhelcentos6-环境下安装-node-oracledb\">RHEL(CentOS)6 环境下安装 node-oracledb</h1>\n<h2 id=\"background\">Background</h2>\n<p>最近准备升级一下 PROD 服务器上的<code>node-oracledb</code>版本. 但是遇到一个很奇怪的现象,就是我本地无法构建出服务器上可用的<code>oracledb</code>. (因为部署方式是打包部署而不是从<code>git</code>拉代码部署)</p>\n<p>一开始以为是<code>C++运行库</code>的原因. 因为又仔细读了一遍<code>node-oracledb</code>的官方安装文档,发现<code>oracledb</code>在编译的时候,只支持支持<code>C++11</code>的编译器.</p>\n<p>立马查看本地环境的<code>gcc</code>版本与运行库版本<code>glibc</code></p>\n<pre><code>gcc -v\nldd --version\n</code></pre>\n<p>发现本地<code>CentOS 6.6</code>版本自带的<code>gcc</code>版本是 4.4,<code>glibc</code>版本是 2.12 但是支持编译和运行 C++11 新特性的<code>gcc</code>版本是 4.7+,<code>glibc</code>版本是 2.14+ 这.版本都不一样怎么玩.</p>\n<h2 id=\"rootcause\">RootCause</h2>\n<p>马上比较了一下 本地构建<code>oracledb</code>与服务器的各种版本发现相关的版本信息如下:</p>\n<blockquote>\n<p>服务器 OS:RedHat Enterprise Linux 6.6 gcc Version:4.4 (Red Hat) glibc Version:2.12 node Version:v0.10.38 npm Version:1.4.28(npm 版本应该不会影响构建,预防万一还是提及一下) node-gyp Version:不明.因为没权限调用该命令. oracle instantclient Version:11.2</p>\n</blockquote>\n<blockquote>\n<p>本地环境 OS:CentOS 6.7 x64 gcc Version:4.4 (Red Hat) glibc Version:2.12 node Version:v4.2.4 npm Version:2.14.8 node-gyp Version:3.2.1 oracle instantclient Version:11.2</p>\n</blockquote>\n<h2 id=\"solution\">Solution</h2>\n<p>思前想后,想想也不知道<code>node.js</code>本身版本到底会对<code>oracledb</code>的构建有什么影响. 毕竟<code>oracledb</code>官方对构建时的<code>C++11</code>编译支持的要求先入为主了</p>\n<p>最后还是决定先切换一下<code>node.js</code>版本,结果问题顺利解决</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-variable\">$npm</span> install n\n<span class=\"hljs-variable\">$n</span> v0.10.38\n<span class=\"hljs-variable\">$npm</span> install oracledb\n</code></pre>\n<p>构建成功.</p>\n","disqus":{"shortname":"aquariuslt","url":"https://blog.aquariuslt.com/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6","identifier":"-posts-2016-01-11-nodejs-oracledb-install-on-rhel-6"}}}