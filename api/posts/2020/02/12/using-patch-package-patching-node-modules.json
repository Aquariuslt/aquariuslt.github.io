{"key":"using-patch-package-patching-node-modules","url":"https://zexo.dev/posts/2020/02/12/using-patch-package-patching-node-modules","path":"/posts/2020/02/12/using-patch-package-patching-node-modules","title":"使用 Patch Package 魔改第三方NPM包 | zexo.dev","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://zexo.dev","name":"Home","position":1},{"@type":"ListItem","item":"https://zexo.dev/posts","name":"Posts","position":2},{"@type":"ListItem","item":"https://zexo.dev/posts/2020/02/12/using-patch-package-patching-node-modules","name":"使用 Patch Package 魔改第三方NPM包","position":3}]},"type":"DETAIL","metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"zexo.dev"},{"name":"og:type","content":"website"},{"name":"og:title","content":"使用 Patch Package 魔改第三方NPM包"},{"name":"og:description","content":"开源社区一直有一个做法(说法): 一言不合就 Fork。自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n"},{"name":"og:image","content":"./cover.png"},{"name":"og:type","content":"article"},{"name":"description","content":"开源社区一直有一个做法(说法): 一言不合就 Fork。自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n"}],"data":{"title":"使用 Patch Package 魔改第三方NPM包","id":"using-patch-package-patching-node-modules","created":"2020-02-12T00:00:00.000Z","updated":"2020-02-12T00:00:00.000Z","categories":[{"id":"blog","label":"Blog","total":0,"link":"/categories/blog"}],"tags":[{"id":"node","label":"Node","total":0,"link":"/tags/node"},{"id":"ci","label":"CI","total":1,"link":"/tags/ci"}],"cover":"/posts/2020/02/12/using-patch-package-patching-node-modules/cover.png","images":[],"toc":[{"label":"使用 Patch Package 魔改第三方 NPM 包","level":1,"id":"使用-patch-package-魔改第三方-npm-包","position":0,"children":[{"label":"What is patch/diff file","level":2,"id":"what-is-patchdiff-file","position":1,"children":[],"pid":0},{"label":"How did patch-package work","level":2,"id":"how-did-patch-package-work","position":2,"children":[],"pid":0},{"label":"实际应用场景","level":2,"id":"实际应用场景","position":3,"children":[{"label":"挑战: Lighthouse x UserAgent","level":3,"id":"挑战-lighthouse-x-useragent","position":4,"children":[],"pid":3},{"label":"初期解决方案","level":3,"id":"初期解决方案","position":5,"children":[],"pid":3},{"label":"patch-package 上场","level":3,"id":"patch-package-上场","position":6,"children":[],"pid":3}],"pid":0},{"label":"小结","level":2,"id":"小结","position":7,"children":[],"pid":0},{"label":"References","level":2,"id":"references","position":8,"children":[],"pid":0}],"pid":-1}],"summary":"开源社区一直有一个做法(说法): 一言不合就 Fork。自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n","src":"\n# 使用 Patch Package 魔改第三方 NPM 包\n\n> 开源社区一直有一个做法(说法): 一言不合就 Fork。\n\n自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。\n\n目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n\n- 需要魔改类库，改个名字包装下重出江湖\n- 作为一个类库，项目本身没有暴露出某些公共的 API，难以修改其内部逻辑(或许设计如此)\n- 社区内部发生了分歧，准备分家\n\n对于情况二我还是挺能理解的，当研究一个开源类库项目，通常关心是否能直接调用公有的 API 即可符合需求需要。\n\n然而，此时发现这个项目源代码的这个功能非常不符合设计模式中的开闭原则，也就是说，难以在不修改内部源码的情况按照需求进行扩展。\n\n同一时间，你发现你的这个需求比较崎岖，并没有一个很好的借口给作者团队提出 issue。\n\n这时候除了要怎么办呢?\n\n对于 Node 项目，有一个目前极其合理的做法：使用 `patch-package` 魔改 node_modules 下的第三方模块源代码。\n\n## What is patch/diff file\n\n参见维基百科 Patch [https://zh.wikipedia.org/zh-hk/Patch](https://zh.wikipedia.org/zh-hk/Patch)\n\nPatch 文件通常有 diff 所产生，用以描述两个不同的文件(集)，或者同一个文件(集)的两个不同的版本(reversion)\n\n通过版本控制工具 Git 产生 diff 大概是什么样?\n\n大概如下:\n\n```diff\ndiff --git a/node_modules/lighthouse/lighthouse-core/lib/emulation.js b/node_modules/lighthouse/lighthouse-core/lib/emulation.js\nindex 7869b7f..87b6725 100644\n--- a/node_modules/lighthouse/lighthouse-core/lib/emulation.js\n+++ b/node_modules/lighthouse/lighthouse-core/lib/emulation.js\n@@ -90,6 +90,18 @@ async function enableDesktop(driver) {\n   ]);\n }\n\n+/**\n+ * @param {Driver} driver\n+ * @param {String} userAgent\n+ * @return {Promise<void>}\n+ */\n+async function enableCustomUserAgent(driver, userAgent) {\n+  await Promise.all([\n+    driver.sendCommand('Network.setUserAgentOverride', {userAgent: userAgent}),\n+  ]);\n+}\n+\n+\n```\n\n## How did patch-package work\n\n从流程上讲，`patch-package` 的使用主要分成三部分\n\n- Update node_modules source code(先魔改 node_modules 目录下，你想修改的类库源码)\n- Making patches (执行命令 `patch-package ${package-name}` 生成一份 patch 文件)\n- Applying patches (执行命令 `patch-package` 自动查找 patch 文件，并执行 patch 脚本)\n- Integration with NPM Scripts (通过在 patch-package 中的 script 下，为不同的生命周期如 `postinstall` 后自动执行 Update patches)\n\n## 实际应用场景\n\n到底在什么场景下，才应该搬出这个 `patch-package` 呢?\n\n这里分享下我个人的一个使用场景：给 lighthouse 打 patch 以获取调用其诊断网页时，自定义 `UserAgent` 的功能。\n\n### 挑战: Lighthouse x UserAgent\n\n当希望程序化调用 `lighthouse` 的时候，默认执行 lighthouse 诊断所使用的设备 user agent，要么就是 默认的 `Nexus 5` (在 lighthouse v5.7.0+ 版本应该默认换成了 Moto G4) ，要么就是默认的 `DESKTOP_USERAGENT`。\n\nlighthouse 的 configuration 中，并没有包含 user agent 相关配置，也没有暴露出一个 public 的 API 去让开发者覆盖此属性。\n\n> 为什么一直没有暴露出这个 API 呢，我没有在相关 issue 中找到答案。我猜应该是设计如此，故意屏蔽了这部分内容。\n\n### 初期解决方案\n\n一开始我是怎么做的?\n\n1. 先是定位出关键需要魔改的、配置 UserAgent 的关键模块在源代码中的位置\n2. fork 一份源码，作为个人仓库，修改关键源码\n3. 从调用 lighthouse 的项目中，移除 npm 官方版本 lighthouse\n4. 利用 git submodule + yarn workspace 安装魔改后的 lighthouse\n\n一共要 4 步，其 3，4 步看起来还是挺崎岖的。\n\n他先是需要新建另外新建一个 git 仓库，还要用隐晦的 yarn workspace 将其安装到 node_modules 下。根据以往的工程经验，除了操作、理解概念麻烦，还有很多后续扩展时存在的缺点\n\n- 使用 git submodule 的形式关联其他项目，实际上做 CI CD 集成要关联很多权限，相对繁琐\n- 对于 monorepo + lerna 的形式， yarn workspace 无法很好的与 monorepo 共存\n- fork 出来的项目源码，在需要对齐 origin repo 的更新时，魔改源码的 commit 会与官方源码的 commit 混搭在一起，代码更变追踪不方便\n\n### patch-package 上场\n\n有了 patch-package 后，需要怎么做?\n\n1. 先是定位出关键需要魔改的、配置 UserAgent 的关键模块在源代码中的位置\n2. 修改项目 node_modules/lighthouse 下对应的关键代码位置\n3. 使用 patch-package 生成 patch 文件，将 patch 文件加入到 git 中\n4. 修改项目 post-install script，集成 patch-package 调用，以确保项目安装好 npm 依赖后，能够自动给 node_modules 下的源代码打 patch\n\n## 小结\n\n首先，对需要魔改的项目源码要有必要程序的了解，这是通用、必须的步骤。\n\n在此基础上，使用 `patch-package` 才能够有效的帮助我们解决魔改 node 类型项目代码时遇到的一些工程化问题。使得魔改代码的更变可追踪、更新 patch 的流程可持续集成。\n\n## References\n\n- patch-package github: [https://github.com/ds300/patch-package](https://github.com/ds300/patch-package)\n- 涉及魔改的 lighthouse user-agent 代码位置: [https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js](https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js)\n","html":"<h1 id=\"使用-patch-package-魔改第三方-npm-包\">使用 Patch Package 魔改第三方 NPM 包</h1>\n<blockquote>\n<p>开源社区一直有一个做法(说法): 一言不合就 Fork。</p>\n</blockquote>\n<p>自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。</p>\n<p>目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：</p>\n<ul>\n<li>需要魔改类库，改个名字包装下重出江湖</li>\n<li>作为一个类库，项目本身没有暴露出某些公共的 API，难以修改其内部逻辑(或许设计如此)</li>\n<li>社区内部发生了分歧，准备分家</li>\n</ul>\n<p>对于情况二我还是挺能理解的，当研究一个开源类库项目，通常关心是否能直接调用公有的 API 即可符合需求需要。</p>\n<p>然而，此时发现这个项目源代码的这个功能非常不符合设计模式中的开闭原则，也就是说，难以在不修改内部源码的情况按照需求进行扩展。</p>\n<p>同一时间，你发现你的这个需求比较崎岖，并没有一个很好的借口给作者团队提出 issue。</p>\n<p>这时候除了要怎么办呢?</p>\n<p>对于 Node 项目，有一个目前极其合理的做法：使用 <code>patch-package</code> 魔改 node_modules 下的第三方模块源代码。</p>\n<h2 id=\"what-is-patchdiff-file\">What is patch/diff file</h2>\n<p>参见维基百科 Patch <a href=\"https://zh.wikipedia.org/zh-hk/Patch\">https://zh.wikipedia.org/zh-hk/Patch</a></p>\n<p>Patch 文件通常有 diff 所产生，用以描述两个不同的文件(集)，或者同一个文件(集)的两个不同的版本(reversion)</p>\n<p>通过版本控制工具 Git 产生 diff 大概是什么样?</p>\n<p>大概如下:</p>\n<pre class=\"hljs\"><code>diff --git a/node_modules/lighthouse/lighthouse-core/lib/emulation.js b/node_modules/lighthouse/lighthouse-core/lib/emulation.js\nindex 7869b7f..87b6725 100644\n<span class=\"hljs-comment\">--- a/node_modules/lighthouse/lighthouse-core/lib/emulation.js</span>\n<span class=\"hljs-comment\">+++ b/node_modules/lighthouse/lighthouse-core/lib/emulation.js</span>\n@@ -90,6 +90,18 @@ async function enableDesktop(driver) {\n   ]);\n }\n\n<span class=\"hljs-addition\">+/**</span>\n<span class=\"hljs-addition\">+ * @param {Driver} driver</span>\n<span class=\"hljs-addition\">+ * @param {String} userAgent</span>\n<span class=\"hljs-addition\">+ * @return {Promise&lt;void&gt;}</span>\n<span class=\"hljs-addition\">+ */</span>\n<span class=\"hljs-addition\">+async function enableCustomUserAgent(driver, userAgent) {</span>\n<span class=\"hljs-addition\">+  await Promise.all([</span>\n<span class=\"hljs-addition\">+    driver.sendCommand('Network.setUserAgentOverride', {userAgent: userAgent}),</span>\n<span class=\"hljs-addition\">+  ]);</span>\n<span class=\"hljs-addition\">+}</span>\n<span class=\"hljs-addition\">+</span>\n<span class=\"hljs-addition\">+</span>\n</code></pre>\n<h2 id=\"how-did-patch-package-work\">How did patch-package work</h2>\n<p>从流程上讲，<code>patch-package</code> 的使用主要分成三部分</p>\n<ul>\n<li>Update node_modules source code(先魔改 node_modules 目录下，你想修改的类库源码)</li>\n<li>Making patches (执行命令 <code>patch-package ${package-name}</code> 生成一份 patch 文件)</li>\n<li>Applying patches (执行命令 <code>patch-package</code> 自动查找 patch 文件，并执行 patch 脚本)</li>\n<li>Integration with NPM Scripts (通过在 patch-package 中的 script 下，为不同的生命周期如 <code>postinstall</code> 后自动执行 Update patches)</li>\n</ul>\n<h2 id=\"实际应用场景\">实际应用场景</h2>\n<p>到底在什么场景下，才应该搬出这个 <code>patch-package</code> 呢?</p>\n<p>这里分享下我个人的一个使用场景：给 lighthouse 打 patch 以获取调用其诊断网页时，自定义 <code>UserAgent</code> 的功能。</p>\n<h3 id=\"挑战-lighthouse-x-useragent\">挑战: Lighthouse x UserAgent</h3>\n<p>当希望程序化调用 <code>lighthouse</code> 的时候，默认执行 lighthouse 诊断所使用的设备 user agent，要么就是 默认的 <code>Nexus 5</code> (在 lighthouse v5.7.0+ 版本应该默认换成了 Moto G4) ，要么就是默认的 <code>DESKTOP_USERAGENT</code>。</p>\n<p>lighthouse 的 configuration 中，并没有包含 user agent 相关配置，也没有暴露出一个 public 的 API 去让开发者覆盖此属性。</p>\n<blockquote>\n<p>为什么一直没有暴露出这个 API 呢，我没有在相关 issue 中找到答案。我猜应该是设计如此，故意屏蔽了这部分内容。</p>\n</blockquote>\n<h3 id=\"初期解决方案\">初期解决方案</h3>\n<p>一开始我是怎么做的?</p>\n<ol>\n<li>先是定位出关键需要魔改的、配置 UserAgent 的关键模块在源代码中的位置</li>\n<li>fork 一份源码，作为个人仓库，修改关键源码</li>\n<li>从调用 lighthouse 的项目中，移除 npm 官方版本 lighthouse</li>\n<li>利用 git submodule + yarn workspace 安装魔改后的 lighthouse</li>\n</ol>\n<p>一共要 4 步，其 3，4 步看起来还是挺崎岖的。</p>\n<p>他先是需要新建另外新建一个 git 仓库，还要用隐晦的 yarn workspace 将其安装到 node_modules 下。根据以往的工程经验，除了操作、理解概念麻烦，还有很多后续扩展时存在的缺点</p>\n<ul>\n<li>使用 git submodule 的形式关联其他项目，实际上做 CI CD 集成要关联很多权限，相对繁琐</li>\n<li>对于 monorepo + lerna 的形式， yarn workspace 无法很好的与 monorepo 共存</li>\n<li>fork 出来的项目源码，在需要对齐 origin repo 的更新时，魔改源码的 commit 会与官方源码的 commit 混搭在一起，代码更变追踪不方便</li>\n</ul>\n<h3 id=\"patch-package-上场\">patch-package 上场</h3>\n<p>有了 patch-package 后，需要怎么做?</p>\n<ol>\n<li>先是定位出关键需要魔改的、配置 UserAgent 的关键模块在源代码中的位置</li>\n<li>修改项目 node_modules/lighthouse 下对应的关键代码位置</li>\n<li>使用 patch-package 生成 patch 文件，将 patch 文件加入到 git 中</li>\n<li>修改项目 post-install script，集成 patch-package 调用，以确保项目安装好 npm 依赖后，能够自动给 node_modules 下的源代码打 patch</li>\n</ol>\n<h2 id=\"小结\">小结</h2>\n<p>首先，对需要魔改的项目源码要有必要程序的了解，这是通用、必须的步骤。</p>\n<p>在此基础上，使用 <code>patch-package</code> 才能够有效的帮助我们解决魔改 node 类型项目代码时遇到的一些工程化问题。使得魔改代码的更变可追踪、更新 patch 的流程可持续集成。</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li>patch-package github: <a href=\"https://github.com/ds300/patch-package\">https://github.com/ds300/patch-package</a></li>\n<li>涉及魔改的 lighthouse user-agent 代码位置: <a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js\">https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js</a></li>\n</ul>\n","disqus":{"shortname":"aquariuslt","url":"https://zexo.dev/posts/2020/02/12/using-patch-package-patching-node-modules","identifier":"-posts-2020-02-12-using-patch-package-patching-node-modules"}}}