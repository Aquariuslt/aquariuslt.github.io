{"key":"CI","url":"https://zexo.dev/tags/ci","path":"/tags/ci","title":"Tag: CI - zexo.dev","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://zexo.dev","name":"Home","position":1},{"@type":"ListItem","item":"https://zexo.dev/tags","name":"Tags","position":2},{"@type":"ListItem","item":"https://zexo.dev/tags/ci","name":"CI","position":3}]},"metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-2"},{"name":"og:site_name","content":"zexo.dev"},{"name":"og:type","content":"website"},{"name":"og:description","itemprop":"description","content":"Tag: CI"},{"name":"description","itemprop":"description","content":"Tag: CI"}],"type":"LIST","data":[{"title":"Using bundlewatch instead of bundlesize","id":"using-bundlewatch-instead-of-bundlesize","created":"2020-04-04T00:00:00.000Z","updated":"2020-04-04T00:00:00.000Z","categories":["Blog"],"tags":["CI","Webpack","Github"],"cover":"/posts/2020/04/04/using-bundlewatch-instead-of-bundlesize/bundlewatch-graph.png","summary":"在 github 上托管的开源项目，特别是对构建产物有体积要求的项目，经常会用到一个叫 bundlesize 的集成服务。https://github.com/siddharthkp/bundlesize\n","link":"/posts/2020/04/04/using-bundlewatch-instead-of-bundlesize"},{"title":"使用 renovate 监控第三方依赖更新","id":"keep-your-repo-dependencies-up-to-date-with-renovate","created":"2020-03-01T00:00:00.000Z","updated":"2020-03-18T00:00:00.000Z","categories":["Blog"],"tags":["Node","CI","NPM","Renovate","Github"],"cover":"/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate/revonate.png","summary":"依赖更新管理曾一直是我容易纠结的一个问题。我希望一直保持我的仓库使用的第三方 package 一直能保持 安全情况下 的最新版本，随着最新版本的更新，一般伴随着以下几种用户关心的内容：fixing: 修复了一些 bugperformance tuning: 一些性能优化\n","link":"/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate"},{"title":"使用 Patch Package 魔改第三方NPM包","id":"using-patch-package-patching-node-modules","created":"2020-02-12T00:00:00.000Z","updated":"2020-02-12T00:00:00.000Z","categories":["Blog"],"tags":["Node","CI"],"cover":"/posts/2020/02/12/using-patch-package-patching-node-modules/cover.png","summary":"开源社区一直有一个做法(说法): 一言不合就 Fork。自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n","link":"/posts/2020/02/12/using-patch-package-patching-node-modules"},{"title":"Monorepo Practice in TypeScript Projects","id":"monorepo-practice-in-typescript-projects","created":"2019-11-14T00:00:00.000Z","updated":"2019-11-14T00:00:00.000Z","categories":["Blog"],"tags":["NPM","CI","Typescript","Monorepo","Lerna","Jest"],"cover":"/posts/2019/11/14/monorepo-practice-in-typescript-projects/cover.png","summary":"随着 Node 生态社区的发展，越来越多的 Nodejs 代码仓库开始采用 Monorepo 的形式进行管理。我们可以看到一些前端 UI 框架、Web 框架，在新版本/一开始就采用了 monorepo 的形式管理代码。Q: 什么是 Monorepo? Monorepo 的基本好处是什么? A: 这里不多阐述，可以参考知乎上的这篇文章: https://zhuanlan.zhihu.com/p/31289463\n","link":"/posts/2019/11/14/monorepo-practice-in-typescript-projects"},{"title":"Github Actions: New YAML Syntax","id":"github-actions-new-yaml-syntax","created":"2019-08-18T00:00:00.000Z","updated":"2019-08-18T00:00:00.000Z","categories":["Blog"],"tags":["NPM","CI","Github","TravisCI","Actions","Docker"],"cover":"/posts/2019/08/18/github-actions-new-yaml-syntax/migrating-github-actions.png","summary":"在之前一篇博文里刚介绍完 Github Actions 配置的HCL语法不久，Github 官方就标记为 deprecated 了。原因是社区声音推崇他们使用新的 YAML 语法，这类的语法配置与现有的其他 CI 平台相对更加接近，更加容易举一反三写出合理的配置。\n","link":"/posts/2019/08/18/github-actions-new-yaml-syntax"},{"title":"Github Actions: Overview and Practice","id":"github-actions-overview-and-practice","created":"2019-07-07T00:00:00.000Z","updated":"2019-07-07T00:00:00.000Z","categories":["Blog"],"tags":["NPM","CI","Github","TravisCI","Actions","Docker"],"cover":"/posts/2019/07/07/github-actions-overview-and-practice/github-actions.png","summary":"Github Actions 自从开放 beta 以来，感觉一直没有掀起什么大浪。但是他的在 CI 平台插件方面的概念其实是符合一直以来的方向的: Docker Image as Plugins我在二月份开始已经申请到了 Github Actions Beta 的体验许可，为了体验 Github Actions 的功能，以及跟目前其他开源项目所用的持续集成平台进行简单的对比，下面将以一个 通过 Gtihub Action 发布 npm package 的过程作为初步体验，讲讲我对 Github Actions 在 CI 方面的认识。\n","link":"/posts/2019/07/07/github-actions-overview-and-practice"}]}