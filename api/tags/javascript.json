{"key":"JavaScript","url":"https://zexo.dev/tags/javascript","path":"/tags/javascript","title":"Tag: JavaScript | zexo.dev","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://zexo.dev","name":"Home","position":1},{"@type":"ListItem","item":"https://zexo.dev/tags","name":"Tags","position":2},{"@type":"ListItem","item":"https://zexo.dev/tags/javascript","name":"JavaScript","position":3}]},"metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"zexo.dev"},{"name":"og:type","content":"website"},{"name":"og:description","content":"Tag: JavaScript"},{"name":"description","content":"Tag: JavaScript"}],"type":"LIST","data":[{"title":"A Karma Plugin: Karma-JAWR Development Note","id":"karma-jawr-development-note","created":"2018-04-01T00:00:00.000Z","updated":"2018-04-01T00:00:00.000Z","categories":["Blog"],"tags":["Karma","Node","AngularJS","JavaScript","JAWR"],"cover":"/posts/2018/04/01/karma-jawr-development-note/cover.png","summary":"上一篇文章基于 Karma 的非分离式前端单元测试基础方案描述了在拆分基于 JAWR 的，前后端的方案的时候，无可避免的为中间编写一个插件的背景故事。在总结开发这个 karma 插件的笔记的时候，最终目的并不是希望读这篇文章的童鞋了解jawr这个插件所解决的核心问题，更多的是介绍 karma 和 karma 插件的设计理念，稍微对 karma 这个 test-runner 有一个更好的印象；亦或是在前端单元测试框架选型/亦或是根据实际项目需要，为了使得项目可被测试，无可避免的做出比较多的修改的时候，能够遵循这种插件开发的约定，使得项目测试方面更好的走向工程化。\n","link":"/posts/2018/04/01/karma-jawr-development-note"},{"title":"基于Karma的非分离式前端单元测试基础方案","id":"karma-based-traditional-java-web-frontend-unittest-solution","created":"2018-03-04T00:00:00.000Z","updated":"2018-03-04T00:00:00.000Z","categories":["Blog"],"tags":["Java","JAWR","Karma","JavaScript","Webpack","ExtJS","Spring","JSF","SpringMVC"],"cover":"/posts/2018/03/04/karma-based-traditional-java-web-frontend-unittest-solution/cover.png","summary":"TL;DR之前在为公司一个稍微有些年头的核心系统的代码寻找一个合理的单元测试方案，在摆弄了一段时间后，目前奠定了一个基于 Karma 的前端单元测试方案。如果你的项目符合以下条件，那么这个解决方案和其中的思路也许能对你的项目有点帮助。原本的项目与前端相关的部分属于 Java Web 项目，抛开与本次主题无关的部分，具体影响单元测试方案选型和落地的几个因素，我把他归结成几类：\n","link":"/posts/2018/03/04/karma-based-traditional-java-web-frontend-unittest-solution"},{"title":"Latest Update on Blog App","id":"latest-update-on-blog-app","created":"2018-03-03T00:00:00.000Z","updated":"2018-03-03T00:00:00.000Z","categories":["Blog"],"tags":["Vue","JavaScript","Webpack","Karma","Gulp","Github","Blog"],"cover":"/posts/2018/03/03/latest-update-on-blog-app/cover.png","summary":"结合最近学到的一些知识，了解的一些规范，和实践过的一些新姿势，重构了 Blog 的整个应用。目前 Vue Branch 版本从4.0.0-beta 到了4.0.1 ，算是可以标记 release 的一个版本了。项目地址不变。(除了最近更新过一次 Github account 的 url，开头从大写变成小写，对其他第三方服务迁移的时候有点麻烦)。\n","link":"/posts/2018/03/03/latest-update-on-blog-app"},{"title":"Angular.js常规性能优化阶段总结","id":"angular-ui-performance-tuning-experience","created":"2016-04-30T00:00:00.000Z","updated":"2016-04-30T00:00:00.000Z","categories":["Blog"],"tags":["Angular","JavaScript"],"cover":"/posts/2016/04/30/angular-ui-performance-tuning-experience/cover.png","summary":"最近在为项目进行性能优化的时候,有总结到一些经验.\n现在梳理一遍,方便以后排查问题.在进行 Angular 页面的性能测试以及学习优化手段之前,查阅了挺多资料.\n其中非常推荐一些前端大牛的博客文章,不仅在技术方面深有造诣,而且表达能力非常清晰,能够条理清晰地将经验传授给大家.\n","link":"/posts/2016/04/30/angular-ui-performance-tuning-experience"},{"title":"Site 项目结构介绍","id":"site-code-structure","created":"2016-03-06T00:00:00.000Z","updated":"2016-03-06T00:00:00.000Z","categories":["Blog"],"tags":["Node","JavaScript"],"cover":"/posts/2016/03/06/site-code-structure/cover.png","summary":"应该说是第一个 Node.js 建站项目. 目的是用于替换 JavaWeb 的后台而且可以在过程中练习一下调节样式的水平.项目本身的结构是从JShelf开始. 是由于公司内部组织了一次 MEAN 的一些入门分享. 分成了几个小组,我们小组根据对 MEAN 的认识魔改了这样一个基本的项目基础结构. 在其原本的结构上.做了做了一些蛋疼的修改大概是根据npm install的提示,更换 lib 的名字或者升级 lib 的版本到最新版. 然后删除了一些没必要的模块.\n","link":"/posts/2016/03/06/site-code-structure"}]}