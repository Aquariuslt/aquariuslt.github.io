{"key":"Node","url":"https://blog.aquariuslt.com/tags/node","path":"/tags/node","title":"Tag: Node | TL; DR","breadcrumbs":{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","item":"https://blog.aquariuslt.com","name":"Home","position":1},{"@type":"ListItem","item":"https://blog.aquariuslt.com/tags","name":"Tags","position":2},{"@type":"ListItem","item":"https://blog.aquariuslt.com/tags/node","name":"Node","position":3}]},"metas":[{"name":"google-site-verification","content":"s3PYm0fCo0ImPqqXoPLiUb_bFdlYODKw54VGSkcFgyE"},{"id":"google-analytics","name":"google-analytics","content":"UA-68904127-1"},{"name":"og:site_name","content":"TL; DR"},{"name":"og:type","content":"website"},{"name":"og:description","content":"Tag: Node"},{"name":"description","content":"Tag: Node"}],"type":"LIST","data":[{"title":"使用 Patch Package 魔改第三方NPM包","id":"using-patch-package-patching-node-modules","created":"2020-02-12T00:00:00.000Z","updated":"2020-02-12T00:00:00.000Z","categories":["Blog"],"tags":["Node","CI"],"cover":"/posts/2020/02/12/using-patch-package-patching-node-modules/cover.png","summary":"开源社区一直有一个做法(说法): 一言不合就 Fork。自古以来文人相轻，这些一言不合就 fork 的做法挺能体现这些现象的。目前看来，对于一个开源项目，我遇到的所谓的一言不合就 fork ，但不是以 fork 作为正常的工作流(也就是说后续不会往 origin repository 提交 Pull Request)，大致来自于以下几种原因：\n","link":"/posts/2020/02/12/using-patch-package-patching-node-modules"},{"title":"A Karma Plugin: Karma-JAWR Development Note","id":"karma-jawr-development-note","created":"2018-04-01T00:00:00.000Z","updated":"2018-04-01T00:00:00.000Z","categories":["Blog"],"tags":["Karma","Node","AngularJS","JavaScript","JAWR"],"cover":"/posts/2018/04/01/karma-jawr-development-note/cover.png","summary":"上一篇文章基于 Karma 的非分离式前端单元测试基础方案描述了在拆分基于 JAWR 的，前后端的方案的时候，无可避免的为中间编写一个插件的背景故事。在总结开发这个 karma 插件的笔记的时候，最终目的并不是希望读这篇文章的童鞋了解jawr这个插件所解决的核心问题，更多的是介绍 karma 和 karma 插件的设计理念，稍微对 karma 这个 test-runner 有一个更好的印象；亦或是在前端单元测试框架选型/亦或是根据实际项目需要，为了使得项目可被测试，无可避免的做出比较多的修改的时候，能够遵循这种插件开发的约定，使得项目测试方面更好的走向工程化。\n","link":"/posts/2018/04/01/karma-jawr-development-note"},{"title":"Site 项目结构介绍","id":"site-code-structure","created":"2016-03-06T00:00:00.000Z","updated":"2016-03-06T00:00:00.000Z","categories":["Blog"],"tags":["Node","JavaScript"],"cover":"/posts/2016/03/06/site-code-structure/cover.png","summary":"应该说是第一个 Node.js 建站项目. 目的是用于替换 JavaWeb 的后台而且可以在过程中练习一下调节样式的水平.项目本身的结构是从JShelf开始. 是由于公司内部组织了一次 MEAN 的一些入门分享. 分成了几个小组,我们小组根据对 MEAN 的认识魔改了这样一个基本的项目基础结构. 在其原本的结构上.做了做了一些蛋疼的修改大概是根据npm install的提示,更换 lib 的名字或者升级 lib 的版本到最新版. 然后删除了一些没必要的模块.\n","link":"/posts/2016/03/06/site-code-structure"},{"title":"Node.js oracledb \"ORA-21561 - OID generation failed\" 解决方案","id":"nodejs-oracledb-ora-21561-solution","created":"2016-01-12T00:00:00.000Z","updated":"2016-01-12T00:00:00.000Z","categories":["Debug"],"tags":["Node","Linux"],"cover":"/posts/2016/01/12/nodejs-oracledb-ora-21561-solution/cover.png","summary":"千辛万苦在虚拟机的CentOS 6下编译好oracledb,运行时报错 \"ORA-21561 - OID generation failed\"原因是虚拟机下的CentOS连接到 oracle 服务器的时候,本地没有有效的连接名称(机器名)\n","link":"/posts/2016/01/12/nodejs-oracledb-ora-21561-solution"},{"title":"RHEL(CentOS)6环境下安装node-oracledb","id":"nodejs-oracledb-install-on-rhel-6","created":"2016-01-11T00:00:00.000Z","updated":"2016-01-11T00:00:00.000Z","categories":["Debug"],"tags":["Node","Linux"],"cover":"/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6/cover.png","summary":"最近准备升级一下 PROD 服务器上的node-oracledb版本. 但是遇到一个很奇怪的现象,就是我本地无法构建出服务器上可用的oracledb. (因为部署方式是打包部署而不是从git拉代码部署)一开始以为是C++运行库的原因. 因为又仔细读了一遍node-oracledb的官方安装文档,发现oracledb在编译的时候,只支持支持C++11的编译器.\n","link":"/posts/2016/01/11/nodejs-oracledb-install-on-rhel-6"},{"title":"网站重构升级计划","id":"site-upgrade-plan","created":"2015-12-27T00:00:00.000Z","updated":"2015-12-27T00:00:00.000Z","categories":["Blog"],"tags":["Site","Blog","VPS","Node"],"cover":"/posts/2015/12/27/site-upgrade-plan/cover.png","summary":"大三的时候,终于接触了第一个能够证实上线的网站项目. 虽然那个项目最后的完成度不咋地,但是从头到尾从需求分析,代码编写, 最后部署到正式服务器上一条龙的经验还是被我全吃掉了.有了掌控 Web 项目的部署运维的初级能力,所以我还是希望能够有一个自己的网站,自己亲手去维护. 由于自己设计 UI 又太 low,然后对 CMS 的能力还是掌控不够. 所以,在购买了自己的 VPS 和域名之后, 就一直使用WordPress作为博客应用.\n","link":"/posts/2015/12/27/site-upgrade-plan"},{"title":"Linux \"libclntsh.so.11.1 cannot open shared object file no such file or directory\"解决方案","id":"nodejs-libclntsh-so-11-1-cannot-open-shared-object-file","created":"2015-12-14T00:00:00.000Z","updated":"2015-12-14T00:00:00.000Z","categories":["Debug"],"tags":["Ubuntu","Linux","Oracle","Node"],"cover":"/posts/2015/12/14/nodejs-libclntsh-so-11-1-cannot-open-shared-object-file/cover.png","summary":"Ubuntu 14.04 node v4.2.3 oracledb v1.4.0 在正常安装好Node.js和oracledb,之后,用到 oracledb 的那一步就开始提示这个错误; 重新跑npm install不能解决问题\n","link":"/posts/2015/12/14/nodejs-libclntsh-so-11-1-cannot-open-shared-object-file"}]}